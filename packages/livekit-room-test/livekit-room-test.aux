{
  "version": 1,
  "state": {
    "livekit-room-test._packageInfo": {
      "id": "livekit-room-test._packageInfo",
      "space": "shared",
      "tags": {
        "system": "livekit-room-test._packageInfo",
        "version": "1.0",
        "versionDate": "📅2024-05-07T14:42:29.603-04:00 local"
      }
    },
    "livekit-room-test.buttons.joinRoom": {
      "id": "livekit-room-test.buttons.joinRoom",
      "space": "shared",
      "tags": {
        "cursor": "pointer",
        "draggable": "false",
        "home": true,
        "homeX": -3,
        "homeY": -3,
        "homeZ": 0,
        "label": "Join Room",
        "labelPadding": "0.2",
        "onClick": "@console.log(await os.joinRoom('myRoom', {\r\n    endpoint: 'https://casualos.me'\r\n}));",
        "onInitialize": "@masks.home = true;",
        "onRoomJoined": "@masks.home = false;",
        "onRoomLeave": "@const { roomName } = that;\n\nconfigBot.tags.roomName = null;\nmasks.home = true;",
        "scaleX": "1.9",
        "scaleY": "0.9",
        "scaleZ": "0.3",
        "system": "livekit-room-test.buttons.joinRoom"
      }
    },
    "livekit-room-test.buttons.leaveRoom": {
      "id": "livekit-room-test.buttons.leaveRoom",
      "space": "shared",
      "tags": {
        "color": "#F44E3B",
        "cursor": "pointer",
        "draggable": "false",
        "home": true,
        "homeX": -3,
        "homeY": "-3",
        "homeZ": 0,
        "label": "Leave Room",
        "labelPadding": "0.2",
        "onClick": "@console.log(await os.leaveRoom('myRoom', {\r\n    endpoint: 'https://casualos.me'\r\n}));",
        "onInitialize": "@masks.home = false;",
        "onRoomJoined": "@masks.home = true;",
        "onRoomLeave": "@masks.home = false;",
        "scaleX": "1.9",
        "scaleY": "0.9",
        "scaleZ": "0.3",
        "system": "livekit-room-test.buttons.leaveRoom"
      }
    },
    "livekit-room-test.buttons.toggleCamera": {
      "id": "livekit-room-test.buttons.toggleCamera",
      "space": "shared",
      "tags": {
        "cursor": "pointer",
        "draggable": "false",
        "home": true,
        "homeX": "-5",
        "homeY": "-5",
        "homeZ": 0,
        "label": "Camera",
        "labelPadding": "0.2",
        "onClick": "@const options = await os.getRoomOptions('myRoom');\r\n\r\nlet videoEnabled = false;\r\nif (options.success) {\r\n    videoEnabled = options.options.video;\r\n}\r\n\r\nconsole.log('setRoomOptions:', await os.setRoomOptions('myRoom', {\r\n    video: !videoEnabled\r\n}));",
        "onInitialize": "@masks.home = false;",
        "onRoomJoined": "@const { roomName, options } = that;\n\nmasks.home = true;\nthisBot.setEnabledState({ enabled: options.video });",
        "onRoomLeave": "@masks.home = false;",
        "onRoomOptionsChanged": "@const { roomName, options } = that;\n\nthisBot.setEnabledState({ enabled: options.video });",
        "scaleX": "1.9",
        "scaleY": "0.9",
        "scaleZ": "0.3",
        "setEnabledState": "@const { enabled } = that;\n\nif (enabled) {\n    masks.color = null;\n} else {\n    masks.color = '#999999';\n}",
        "system": "livekit-room-test.buttons.toggleCamera"
      }
    },
    "livekit-room-test.buttons.toggleMic": {
      "id": "livekit-room-test.buttons.toggleMic",
      "space": "shared",
      "tags": {
        "cursor": "pointer",
        "draggable": "false",
        "home": true,
        "homeX": "-3",
        "homeY": "-5",
        "homeZ": 0,
        "label": "Microphone",
        "labelPadding": "0.2",
        "onClick": "@const options = await os.getRoomOptions('myRoom');\r\n\r\nlet audioEnabled = false;\r\nif (options.success) {\r\n    audioEnabled = options.options.audio;\r\n}\r\n\r\nconsole.log('setRoomOptions:', await os.setRoomOptions('myRoom', {\r\n    audio: !audioEnabled\r\n}));",
        "onInitialize": "@masks.home = false;",
        "onRoomJoined": "@const { roomName, options } = that;\n\nmasks.home = true;\nthisBot.setEnabledState({ enabled: options.audio });",
        "onRoomLeave": "@masks.home = false;",
        "onRoomOptionsChanged": "@const { roomName, options } = that;\n\nthisBot.setEnabledState({ enabled: options.audio });",
        "scaleX": "1.9",
        "scaleY": "0.9",
        "scaleZ": "0.3",
        "setEnabledState": "@const { enabled } = that;\n\nif (enabled) {\n    masks.color = null;\n} else {\n    masks.color = '#999999';\n}",
        "system": "livekit-room-test.buttons.toggleMic"
      }
    },
    "livekit-room-test.buttons.toggleScreenShare": {
      "id": "livekit-room-test.buttons.toggleScreenShare",
      "space": "shared",
      "tags": {
        "color": "#FFFFFF",
        "cursor": "pointer",
        "draggable": "false",
        "home": true,
        "homeX": "-1",
        "homeY": "-5",
        "label": "Screen Share",
        "labelPadding": "0.2",
        "onClick": "@const options = await os.getRoomOptions('myRoom');\n\nlet screenEnabled = false;\nif (options.success) {\n    screenEnabled = options.options.screen;\n}\n\nconsole.log('setRoomOptions:', await os.setRoomOptions('myRoom', {\n    screen: !screenEnabled\n}));",
        "onInitialize": "@masks.home = false;",
        "onRoomJoined": "@const { roomName, options } = that;\n\nmasks.home = true;\nthisBot.setEnabledState({ enabled: options.screen });",
        "onRoomLeave": "@masks.home = false;",
        "onRoomOptionsChanged": "@const { roomName, options } = that;\n\nthisBot.setEnabledState({ enabled: options.screen });",
        "scaleX": "1.9",
        "scaleY": "0.9",
        "scaleZ": "0.3",
        "setEnabledState": "@const { enabled } = that;\n\nif (enabled) {\n    masks.color = null;\n} else {\n    masks.color = '#999999';\n}",
        "system": "livekit-room-test.buttons.toggleScreenShare"
      }
    },
    "livekit-room-test.buttons.toggleXR": {
      "id": "livekit-room-test.buttons.toggleXR",
      "space": "shared",
      "tags": {
        "color": "#7B64FF",
        "cursor": "pointer",
        "draggable": "false",
        "home": true,
        "homeX": "-3",
        "homeY": "-1",
        "homeZ": 0,
        "label": "WebXR",
        "labelPadding": "0.2",
        "onClick": "@if (configBot.tags.inAR) {\n    os.disableAR();\n} else {\n    os.enableAR();\n}",
        "onEnterAR": "@configBot.tags.inAR = true;",
        "onExitAR": "@configBot.tags.inAR = false;",
        "scaleX": "1.9",
        "scaleY": "0.9",
        "scaleZ": "0.3",
        "system": "livekit-room-test.buttons.toggleXR"
      }
    },
    "livekit-room-test.init": {
      "id": "livekit-room-test.init",
      "space": "shared",
      "tags": {
        "home": "false",
        "homeSortOrder": 0,
        "homeX": 0,
        "homeY": 0,
        "initialize": "@if (!masks.initialized) {\n    masks.initialized = true;\n    shout('onInitialize');\n}",
        "label": "manager",
        "onEggHatch": "@thisBot.initialize();",
        "onInitialize": "@gridPortalBot.tags.portalColor = \"#abdbe3\";\nconfigBot.tags.leftWristPortal = `${configBot.id}-leftWristPortal`;\nleftWristPortalBot.tags.portalGridScale = 0.025;\n",
        "onInstJoined": "@thisBot.initialize();",
        "system": "livekit-room-test.init"
      }
    },
    "livekit-room-test.roomListener": {
      "id": "livekit-room-test.roomListener",
      "space": "shared",
      "tags": {
        "color": "#999999",
        "onRoomJoined": "@const { roomName, options } = that;\n\nconfigBot.tags.roomName = roomName;",
        "onRoomLeave": "@const { roomName } = that;\n\nif (roomName === configBot.tags.roomName) {\n    configBot.tags.roomName = null;\n}",
        "onRoomTrackSubscribed": "@if (that.kind === 'video') {\r\n    const otherVideoBots = getBots('videoBot', true);\r\n\r\n    // Calculate a sort order for the new video bot.\r\n    let highestSortOrder = 0;\r\n    for (let videoBot of otherVideoBots) {\r\n        if (typeof videoBot.tags.sortOrder === 'number') {\r\n            if (videoBot.tags.sortOrder > highestSortOrder) {\r\n                highestSortOrder = videoBot.tags.sortOrder;\r\n            }\r\n        }\r\n    }\r\n\r\n    const newVideoBot = create({\r\n        space: 'tempLocal',\r\n        home: true,\r\n        formAddress: that.address,\r\n        videoBot: true,\r\n        sortOrder: highestSortOrder + 1,\r\n        room: that.roomName,\r\n        isRemote: that.isRemote,\r\n        remoteId: that.remoteId,\r\n        strokeWidth: 15,\r\n        onVideoBotCreated: `@\r\n            const { newVideoBot, videoBots } = that;\r\n            thisBot.positionRefresh({ videoBots });\r\n        `,\r\n        onVideoBotDestroyed: `@\r\n            const { videoBots } = that;\r\n            thisBot.positionRefresh({ videoBots });\r\n        `,\r\n        onRoomSpeakersChanged: `@\r\n            const { speakerIds } = that;\r\n            const speaking = speakerIds.some(id => id === tags.remoteId);\r\n            const inAR = configBot.tags.inAR;\r\n\r\n            if (speaking) {\r\n                tags.strokeColor = '#0f0';\r\n\r\n                if (inAR) {\r\n                    tags[configBot.id]\r\n                }\r\n            } else {\r\n                tags.strokeColor = null;\r\n            }\r\n        `,\r\n        positionRefresh: `@\r\n            const { videoBots } = that;\r\n\r\n            const index = videoBots.findIndex(b => b === thisBot);\r\n\r\n            tags.homeX = 10;\r\n            tags.homeY = index;\r\n        `\r\n    });\r\n\r\n    const videoBots = getBots('videoBot', true);\r\n    sortBotsAZ(videoBots, 'sortOrder');\r\n\r\n    shout('onVideoBotCreated', { newVideoBot, videoBots });\r\n}",
        "onRoomTrackUnsubscribed": "@const bots = getBots('formAddress', that.address);\r\n\r\nif (bots && bots.length) {\r\n    destroy(bots);\r\n    \r\n    const videoBots = getBots('videoBot', true);\r\n    sortBotsAZ(videoBots, 'sortOrder');\r\n\r\n    shout('onVideoBotDestroyed', { videoBots });\r\n}",
        "system": "livekit-room-test.roomListener"
      }
    },
    "livekit-room-test.sortUtils": {
      "id": "livekit-room-test.sortUtils",
      "space": "shared",
      "tags": {
        "onDestroy": "@globalThis.sortAZ = undefined;\nglobalThis.sortBotsAZ = undefined;\nglobalThis.sortZA = undefined;\nglobalThis.sortBotsZA = undefined;",
        "onInitialize": "@function _sort(array, propertyKey, dir) { \n    array.sort((a, b) => {\n        let valueA = Number(a[propertyKey]);\n        let valueB = Number(b[propertyKey]);\n        \n        if (Number.isNaN(valueA)) {\n            valueA = 0;\n        }\n        if (Number.isNaN(valueB)) {\n            valueB = 0;\n        }\n        \n        if (dir === 'az') {\n            return valueA > valueB ? 1 : -1;\n        } else {\n            return valueA < valueB ? 1 : -1;\n        }\n    });\n}\n\nfunction _sortBots(array, tag, dir) {\n    array.sort((a, b) => {\n        let valueA = Number(a.tags[tag]);\n        let valueB = Number(b.tags[tag]);\n        \n        if (Number.isNaN(valueA)) {\n            valueA = 0;\n        }\n        if (Number.isNaN(valueB)) {\n            valueB = 0;\n        }\n\n        if (dir === 'az') {\n            return valueA > valueB ? 1 : -1;\n        } else {\n            return valueA < valueB ? 1 : -1;\n        }\n    });\n}\n\nfunction sortAZ(array, propertyKey) {\n    return _sort(array, propertyKey, 'az');\n}\n\nfunction sortZA(array, propertyKey) {\n    return _sort(array, propertyKey, 'za');\n}\n\nfunction sortBotsAZ(array, tag) {\n    return _sortBots(array, tag, 'az');\n}\n\nfunction sortBotsZA(array, tag) {\n    return _sortBots(array, tag, 'za');\n}\n\nglobalThis.sortAZ = sortAZ;\nglobalThis.sortBotsAZ = sortBotsAZ;\nglobalThis.sortZA = sortZA;\nglobalThis.sortBotsZA = sortBotsZA;",
        "system": "livekit-room-test.sortUtils"
      }
    },
    "livekit-room-test.stargate": {
      "id": "livekit-room-test.stargate",
      "space": "shared",
      "tags": {
        "form": "sprite",
        "formAddress": "https://publicos-link-filesbucket-404655125928.s3.amazonaws.com/ab-1/266b0f9e17952ca9a0569a221b3f4d1ba6652eb9cf14666b68154fe5162e7bc0.png",
        "home": true,
        "homeX": -10,
        "homeY": 0,
        "homeZ": 0,
        "onAnyBotClicked": "@",
        "onClick": "@const result = await os.raycast(\"grid\", os.getPointerPosition(\"mouse\"), os.getPointerDirection(\"mouse\"));\n\nos.log('botID: ' + result.botIntersections.map(x => x.bot.id) + ' ' + result.botIntersections.map(b => b.uv).join(', '));",
        "onGridClick": "@// const result = await os.raycast(\"grid\", os.getPointerPosition(\"mouse\"), os.getPointerDirection(\"mouse\"));\n\n// //os.toast('Found Bots: ' + result.botIntersections.map(b => b.id).join(', '));\n// os.log(result.botIntersections)",
        "orientationMode": "billboard",
        "scale": "4",
        "system": "livekit-room-test.stargate"
      }
    },
    "livekit-room-test.wilson": {
      "id": "livekit-room-test.wilson",
      "space": "shared",
      "tags": {
        "8063966c-ae2f-4b2e-a5ed-03f01b07e686-leftWristPortalRotation": "🔁0.3261836147044463,0.07365495411366968,-0.34970666444743126,0.8751482437612471",
        "8063966c-ae2f-4b2e-a5ed-03f01b07e686-leftWristPortalRotationX": 0.675797655998978,
        "8063966c-ae2f-4b2e-a5ed-03f01b07e686-leftWristPortalRotationY": -0.09938267861871977,
        "8063966c-ae2f-4b2e-a5ed-03f01b07e686-leftWristPortalRotationZ": -0.7253721769485189,
        "8063966c-ae2f-4b2e-a5ed-03f01b07e686-leftWristPortalX": 0.9081765782405972,
        "8063966c-ae2f-4b2e-a5ed-03f01b07e686-leftWristPortalY": -0.38684396626452233,
        "8063966c-ae2f-4b2e-a5ed-03f01b07e686-leftWristPortalZ": -0.19829347005908937,
        "form": "mesh",
        "formAddress": "https://publicos-link-filesbucket-404655125928.s3.amazonaws.com/ab-1/b4aec1d6dfa5adafeb38d3f6ff54b0ae06d9f4c964c2f63646c9e07f4b2bd7c2.xml",
        "formSubtype": "gltf",
        "home": true,
        "homeX": -8,
        "homeY": -3,
        "homeZ": 0,
        "system": "livekit-room-test.wilson"
      }
    }
  }
}