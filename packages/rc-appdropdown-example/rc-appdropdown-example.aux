{
  "version": 1,
  "state": {
    "rc-appdropdown-example._packageInfo": {
      "id": "rc-appdropdown-example._packageInfo",
      "space": "shared",
      "tags": {
        "system": "rc-appdropdown-example._packageInfo",
        "version": "1.1",
        "versionDate": "üìÖ2024-04-03T10:45:22.813-04:00 local"
      }
    },
    "rc-appdropdown-example.toggleApp": {
      "id": "rc-appdropdown-example.toggleApp",
      "space": "shared",
      "tags": {
        "cursor": "pointer",
        "home": "true",
        "label": "toggle app",
        "onClick": "@const appBot = getBot('system', 'rc-appdropdown-example.app');\n\nif (appBot.vars.appInstance) {\n    appBot.unmount();\n} else {\n    appBot.mount();\n}",
        "scaleX": "5",
        "scaleY": "2",
        "scaleZ": "0.3",
        "system": "rc-appdropdown-example.toggleApp"
      }
    },
    "rc-appdropdown-example.app": {
      "id": "rc-appdropdown-example.app",
      "space": "shared",
      "tags": {
        "App": "@const { useState, useCallback } = os.appHooks;\n    \nconst App = () => {\n    const [ selectedEmoji, setSelectedEmoji ] = useState('üçî');\n\n    const onDropdownChange = useCallback((event) => {\n        const value = event.currentTarget.value;\n\n        if (value === 'Hamburger') { setSelectedEmoji('üçî'); }\n        else if (value === 'Watermelon') { setSelectedEmoji('üçâ'); } \n        else if (value === 'Ice Cream') { setSelectedEmoji('üç®'); }\n        else if (value === 'Chicken') { setSelectedEmoji('üçó'); } \n        else if (value === 'Banana') { setSelectedEmoji('üçå'); }\n        else if (value === 'Cookie') { setSelectedEmoji('üç™'); }\n        else { setSelectedEmoji('‚ùì')};\n    }, [setSelectedEmoji]);\n\n    return (\n        <>\n            <style>{tags['style.css']}</style>\n            <div className='custom-app'>\n                <h1>Dropdown Values From Tag</h1>\n                <p>This custom app shows how you can populate a dropdown selection menu with values from a bot tag.</p>\n\n                <label for='dropdown'>Dropdown:</label>\n                <select onChange={onDropdownChange}>\n                    { tags.dropdownOptions.map((opt) => {\n                        return <option value={opt}>{opt}</option>\n                    })}\n                </select>\n                <span>{selectedEmoji}</span>\n            </div>\n        </>\n    )\n}\n\nreturn App;\n",
        "dropdownOptions": "üß¨[\n    \"Hamburger\",\n    \"Watermelon\",\n    \"Ice Cream\",\n    \"Chicken\",\n    \"Cookie\"\n]",
        "forceUpdate": "@const App = thisBot.vars.appInstance;\n\nif (App) {\n    os.compileApp(tags.system, <App/>)\n}\n",
        "mount": "@if (!thisBot.vars.appInstance) {\n    thisBot.vars.appInstance = thisBot.App();\n    await os.registerApp(tags.system, thisBot);\n\n    thisBot.forceUpdate();\n}\n",
        "onDestroy": "@thisBot.unmount();",
        "style.css": ".custom-app {\n    background-color: white;\n    padding: 12px;\n}\n",
        "system": "rc-appdropdown-example.app",
        "unmount": "@if (thisBot.vars.appInstance) {\n    delete thisBot.vars.appInstance;\n\n    // Compiling the app with an empty root value is a workaround that allows the\n    // previous components to perform their unmounting code properly.\n    await os.compileApp(tags.system, <></>);\n\n    await os.unregisterApp(tags.system);\n}\n"
      }
    }
  }
}