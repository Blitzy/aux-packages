{
  "version": 1,
  "state": {
    "rc-differ._packageInfo": {
      "id": "rc-differ._packageInfo",
      "space": "shared",
      "tags": {
        "system": "rc-differ._packageInfo",
        "version": "3.1",
        "versionDate": "📅2025-06-20T16:11:55.248-04:00 local"
      }
    },
    "rc-differ.app": {
      "id": "rc-differ.app",
      "space": "shared",
      "tags": {
        "App": "@const { useState, useCallback, useEffect, useMemo } = os.appHooks;\n\nconst DEFAULT_BOT_COMPARE_TAG = 'system';\nconst CACHE_IDS = {\n    DIFFER_MODE: 'rc-differ-mode',\n    ORIGINAL_TARGET: 'rc-differ-original-target',\n    CHANGED_TARGET: 'rc-differ-changed-target',\n    CHANGES_ONLY: 'rc-differ-changed-only',\n    ENTIRE_TAG: 'rc-differ-entire-tag',\n    BOT_COMPARE_TAG: 'rc-differ-bot-compare-tag',\n    LAST_SELECTED_CHOOSE_FROM_OPTION: 'rc-differ-last-selected-choose-from-option',\n    EGG_LOOKUP_RECORD_KEY: 'rc-differ-egg-lookup-record-key',\n    EGG_LOOKUP_EGG_NAME: 'rc-differ-egg-lookup-egg-name',\n    EGG_LOOKUP_EGG_VERSION: 'rc-differ-egg-lookup-egg-version',\n}\n\n// recursiveForLoop helps get around some of the limitations of the \n// CasualOS __energyCheck when parsing through large aux files.\nfunction recursiveForLoop({\n    start = 0,\n    end,\n    step = 1,\n    callback,\n    condition = null\n}) {\n\n    function loop(current) {\n        // Check custom condition if provided\n        if (condition && !condition(current)) return;\n\n        // Default termination conditions\n        if (step > 0 && current >= end) return;\n        if (step < 0 && current <= end) return;\n        if (step === 0) return;\n\n        // Execute callback\n        const result = callback(current);\n\n        // Allow early termination if callback returns false\n        if (result === false) return;\n\n        // Continue recursion\n        loop(current + step);\n    }\n\n    loop(start);\n}\n\nfunction getCachedOption(name, defaultValue) {\n    if (configBot) {\n        if (!configBot.vars.rcDifferOptionCache) {\n            configBot.vars.rcDifferOptionCache = {};\n        }\n\n        return configBot.vars.rcDifferOptionCache[name] ?? defaultValue;\n    }\n}\n\nfunction setCachedOption(name, value) {\n    if (configBot) {\n        if (!configBot.vars.rcDifferOptionCache) {\n            configBot.vars.rcDifferOptionCache = {};\n        }\n\n        configBot.vars.rcDifferOptionCache[name] = value;\n        // console.log(`set cached option ${name}:`, {...configBot.vars.rcDifferOptionCache});\n    }\n}\n\nasync function selectAuxFileFromEgg() {\n    const cachedRecordKey = getCachedOption(CACHE_IDS.EGG_LOOKUP_RECORD_KEY, configBot.tags.studio);\n    const recordKey = await os.showInput(cachedRecordKey, {\n        title: 'Record to lookup egg in',\n        type: 'text',\n    })\n\n    if (!recordKey) {\n        // No record key specified.\n        return null;\n    }\n\n    if (recordKey !== cachedRecordKey) {\n        setCachedOption(CACHE_IDS.EGG_LOOKUP_RECORD_KEY, recordKey);\n    }\n\n    const cachedEggName = getCachedOption(CACHE_IDS.EGG_LOOKUP_EGG_NAME, null);\n    const eggName = await os.showInput(cachedEggName, {\n        title: 'Name of egg',\n        type: 'text',\n    })\n\n    if (!eggName) {\n        // No egg name specified.\n        return null;\n    }\n\n    if (eggName !== cachedEggName) {\n        setCachedOption(CACHE_IDS.EGG_LOOKUP_EGG_NAME, eggName);\n    }\n\n    const eggDataResponse = await os.getData(recordKey, eggName);\n\n    if (!eggDataResponse.success) {\n        os.toast(`No data found at address '${eggName}' in record '${recordKey}'`, 5);\n        return null;\n    }\n\n    const egg = eggDataResponse.data;\n\n    if (!Array.isArray(egg.eggVersionHistory) || egg.eggVersionHistory.length === 0) {\n        os.toast(`Data found at address '${eggName}' in record '${recordKey}' does not appear to be an egg.`, 5);\n        return null;\n    }\n\n    const eggVersionOptions = egg.eggVersionHistory.map((item, index) => {\n        return { label: `version ${index + 1}`, value: index }\n    })\n\n    let cachedEggVersion = getCachedOption(CACHE_IDS.EGG_LOOKUP_EGG_VERSION, eggVersionOptions.length - 1);\n\n    if (cachedEggVersion >= eggVersionOptions.length) {\n        // If the cached egg version is too large for the number of versions\n        // available for this egg, then set it the current version for this egg.\n        cachedEggVersion = eggVersionOptions.length - 1;\n        setCachedOption(CACHE_IDS.EGG_LOOKUP_EGG_VERSION, cachedEggVersion);\n    }\n\n    const selectedVersionOption = await os.showInput(cachedEggVersion, {\n        title: 'Version of egg',\n        type: 'list',\n        subtype: 'select',\n        items: eggVersionOptions,\n    })\n\n    if (!selectedVersionOption) {\n        // No egg version selected.\n        return null;\n    }\n\n    const version = selectedVersionOption.value;\n\n    if (version !== cachedEggVersion) {\n        setCachedOption(CACHE_IDS.EGG_LOOKUP_EGG_VERSION, version);\n    }\n\n    const auxDataUrl = egg.eggVersionHistory[version];\n    const auxData = await os.getFile(auxDataUrl);\n    const auxFile = {\n        name: `${eggName} (v${version + 1})`,\n        data: auxData\n    }\n\n    return auxFile;\n}\n\nasync function selectAuxFile() {\n    const files = await os.showUploadFiles();\n\n    let selectedAuxFiles = files.filter((file) => {\n        if (file.name.endsWith('.aux')) {\n            return true;\n        } else {\n            return false;\n        }\n    })\n\n    if (selectedAuxFiles.length) {\n        if (selectedAuxFiles.length > 1) {\n            os.toast('Can only diff one file at a time.', 4);\n        }\n\n        let auxData = JSON.parse(selectedAuxFiles[0].data);\n\n        let auxFile = {\n            name: selectedAuxFiles[0].name,\n            data: auxData,\n        }\n\n        return auxFile;\n    } else {\n        return null;\n    }\n}\n\nasync function selectAuxFiles() {\n    const files = await os.showUploadFiles();\n\n    let selectedAuxFiles = files.filter((file) => {\n        if (file.name.endsWith('.aux')) {\n            return true;\n        } else {\n            return false;\n        }\n    })\n\n    if (selectedAuxFiles.length) {\n        let auxFiles = [];\n\n        recursiveForLoop({\n            start: 0,\n            end: selectedAuxFiles.length,\n            condition: (i) => i < selectedAuxFiles.length,\n            callback: (i) => {\n                let auxData = JSON.parse(selectedAuxFiles[i].data);\n                auxFiles.push({\n                    name: selectedAuxFiles[i].name,\n                    data: auxData,\n                })\n            }\n        })\n\n        return auxFiles;\n    } else {\n        return null;\n    }\n}\n\nasync function createCompareTagToBotMap(auxFile, compareTag, onError) {\n    let botMap = {};\n\n    if (auxFile) {\n        const auxData = auxFile.data;\n        let botState;\n\n        if (auxData.version === 1) {\n            botState = auxData.state;\n        } else if (auxData.version === 2) {\n            if (auxData.updates.length === 1) {\n                const update = auxData.updates[0];\n                botState = await os.getInstStateFromUpdates([update]);\n\n            } else if (auxData.updates.length > 1) {\n                if (onError) {\n                    onError(`AUX Version 2 files can only have 1 update.`);\n                }\n            }\n        }\n\n        for (let botId in botState) {\n            let botData = botState[botId];\n\n            let compareTagValue = botData.tags[compareTag];\n\n            if (compareTagValue) {\n                if (botMap[compareTagValue]) {\n                    if (onError) {\n                        onError(`Bot with ${compareTag} tag value of ${compareTagValue} already exists in ${auxFile.name}`);\n                    }\n                }\n\n                botMap[compareTagValue] = botData;\n            } else {\n                if (onError) {\n                    onError(`Bot Id ${botId} in ${auxFile.name} does not specify the compare tag '${compareTag}'`);\n                }\n            }\n\n        }\n    }\n\n    return botMap;\n}\n\n/**\n * Convert the given value to a string that can be used with the jsdiff library.\n * Jsdiff doesnt like to be given anything other than strings, so this conversion is needed for undefined, null, booleans, etc.\n */\nfunction convertToDiffableString(value) {\n    if (value == null) {\n        return '';\n    } else if (typeof value.toString === 'function') {\n        return value.toString();\n    } else {\n        throw new Error('[convertToDiffableString] could not convert the given value to a string.');\n    }\n}\n\nfunction useImport(url) {\n    const [lib, setLib] = useState(null);\n    const [loading, setLoading] = useState(false);\n\n    // Import.\n    useEffect(() => {\n        async function load() {\n            setLoading(true);\n\n            try {\n                const lib = await import(url);\n                setLib(lib);\n            } catch (e) {\n                console.error('Failed to import:', url);\n                setLib(null);\n            } finally {\n                setLoading(false);\n            }\n        }\n\n        load();\n    }, [url]);\n\n    return [lib, loading];\n}\n\nfunction getSortedFiles(files) {\n    if (!Array.isArray(files)) {\n        return files;\n    }\n    \n    return [...files].sort((a, b) => a.name.localeCompare(b.name));\n}\n\nconst BotDiff = ({\n    botDiff,\n    showEntireTag\n}) => {\n    return (\n        <div className='bot-diff'>\n            <div className='bot-name'>{botDiff.botCompareKey}</div>\n            <div className='bot-tags'>\n                {botDiff.tagDiffs.map((el, index) => {\n                    return <TagDiff key={index} tagDiff={el} showEntireTag={showEntireTag} />\n                })}\n            </div>\n        </div>\n    )\n}\n\nconst FileGroup = ({\n    fileGroup,\n    showEntireTag\n}) => {\n    const [isCollapsed, setIsCollapsed] = useState(true);\n\n    const toggleCollapse = useCallback(() => {\n        setIsCollapsed(prev => !prev);\n    }, []);\n\n    const getBadgeInfo = (status) => {\n        switch (status) {\n            case 'new':\n                return { className: 'badge-new', text: 'NEW' };\n            case 'removed':\n                return { className: 'badge-removed', text: 'REMOVED' };\n            case 'modified':\n                return { className: 'badge-modified', text: 'MODIFIED' };\n            case 'no-changes':\n                return { className: 'badge-no-changes', text: 'NO CHANGES' };\n            default:\n                return null;\n        }\n    };\n\n    const badgeInfo = getBadgeInfo(fileGroup.status);\n\n    return (\n        <div className='file-group'>\n            <div className='file-header' onClick={toggleCollapse}>\n                <div className='file-name'>\n                    <span className='collapse-icon material-icon'>\n                        {isCollapsed ? 'add' : 'remove'}\n                    </span>\n                    {fileGroup.fileName}\n                    {badgeInfo && (\n                        <span className={`file-status-badge ${badgeInfo.className}`}>\n                            {badgeInfo.text}\n                        </span>\n                    )}\n                </div>\n                <div className='file-stats'>\n                    {fileGroup.botChangeCount != null &&\n                        <div className='change-count'>{fileGroup.botChangeCount} bot(s) changed.</div>\n                    }\n                    {fileGroup.tagChangeCount != null &&\n                        <div className='change-count'>{fileGroup.tagChangeCount} tag(s) changed.</div>\n                    }\n                </div>\n            </div>\n            {!isCollapsed && (\n                <div className='file-bots'>\n                    {fileGroup.botDiffs.map((botDiff, index) => {\n                        return <BotDiff key={index} botDiff={botDiff} showEntireTag={showEntireTag} />\n                    })}\n                </div>\n            )}\n        </div>\n    )\n}\n\nconst TagDiff = ({\n    tagDiff,\n    showEntireTag\n}) => {\n\n    let diffLines = [];\n    let oldLineNum = 1;\n    let newLineNum = 1;\n\n    for (let diff of tagDiff.diff) {\n        const lines = diff.value.split('\\n');\n        if (lines[lines.length - 1] === '') {\n            lines.pop();\n        }\n\n        for (let line of lines) {\n            let lineObj = {\n                oldLineNum: undefined,\n                newLineNum: undefined,\n                value: line,\n                added: diff.added,\n                removed: diff.removed,\n            }\n\n            if (diff.added) {\n                lineObj.newLineNum = newLineNum;\n                newLineNum++;\n            } else if (diff.removed) {\n                lineObj.oldLineNum = oldLineNum;\n                oldLineNum++;\n            } else {\n                lineObj.oldLineNum = oldLineNum;\n                lineObj.newLineNum = newLineNum;\n                oldLineNum++;\n                newLineNum++;\n            }\n\n            diffLines.push(lineObj);\n        }\n    }\n\n    if (!showEntireTag) {\n        const contextLines = 3;\n        let reducedDiffLines = [];\n        let lastIncludedIndex = -1;\n\n        recursiveForLoop({\n            start: 0,\n            end: diffLines.length,\n            condition: (i) => i < diffLines.length,\n            callback: (i) => {\n                let line = diffLines[i];\n\n                if (line.added || line.removed) {\n                    // Include context lines above and below the change\n                    const start = Math.max(0, i - contextLines);\n                    const end = Math.min(diffLines.length, i + contextLines + 1);\n\n                    recursiveForLoop({\n                        start: start,\n                        end: end,\n                        condition: (k) => k < end,\n                        callback: (k) => {\n                            if (!reducedDiffLines.includes(diffLines[k])) {\n                                if (k > lastIncludedIndex + 1 && reducedDiffLines.length > 0) {\n                                    // Insert a visual divider if there's a gap\n                                    let hiddenRangeStart = diffLines[lastIncludedIndex + 1].oldLineNum;\n                                    let hiddenRangeEnd = diffLines[k].oldLineNum - 1;\n\n                                    // Check if hiddenRangeStart and hiddenRangeEnd are valid\n                                    if (hiddenRangeStart !== undefined && hiddenRangeEnd !== undefined) {\n                                        reducedDiffLines.push({ divider: true, range: [hiddenRangeStart, hiddenRangeEnd] });\n                                    }\n                                }\n                                reducedDiffLines.push(diffLines[k]);\n                                lastIncludedIndex = k;\n                            }\n                        }\n                    })\n                }\n            }\n        })\n\n        // Check for initial hidden lines if the first change doesn't start from the first line\n        if (diffLines.length > 0 && reducedDiffLines.length > 0 && reducedDiffLines[0].oldLineNum > 1) {\n            reducedDiffLines.unshift({\n                divider: true,\n                range: [1, reducedDiffLines[0].oldLineNum - 1],\n            });\n        }\n\n        // Check for trailing hidden lines if the last change doesn't end at the last line\n        if (diffLines.length > 0 && lastIncludedIndex >= 0 && lastIncludedIndex < diffLines.length - 1) {\n            // Ensure we have valid objects before accessing properties\n            const lastLine = diffLines[diffLines.length - 1];\n            const lastDisplayedLine = reducedDiffLines[reducedDiffLines.length - 1];\n\n            if (lastLine && lastDisplayedLine &&\n                lastLine.oldLineNum !== undefined &&\n                lastDisplayedLine.oldLineNum !== undefined &&\n                lastLine.oldLineNum > lastDisplayedLine.oldLineNum) {\n\n                reducedDiffLines.push({\n                    divider: true,\n                    range: [lastDisplayedLine.oldLineNum + 1, lastLine.oldLineNum],\n                });\n            }\n        }\n\n        diffLines = reducedDiffLines;\n    }\n\n    return (\n        <div className='tag-diff'>\n            <div className='tag-name'>{tagDiff.tag}</div>\n            <div className='tag-content'>\n                {(diffLines && diffLines.length > 0) &&\n                    <table>\n                        {diffLines.map((el, index) => {\n                            if (el.divider) {\n                                let message;\n\n                                if (el.range && el.range.length === 2) {\n                                    if (Math.abs(el.range[0] - el.range[1]) > 0) {\n                                        message = `Lines ${el.range[0]} to ${el.range[1]} hidden`;\n                                    } else {\n                                        message = `Line ${el.range[0]} hidden`;\n                                    }\n                                } else {\n                                    message = `Lines hidden`;\n                                }\n\n                                return (\n                                    <tr key={`divider-${index}`} className='divider'>\n                                        <td className='line-number'>...</td>\n                                        <td className='line-number'>...</td>\n                                        <td className='line-content'>{message}</td>\n                                    </tr>\n                                )\n                            } else {\n                                let subClass = '';\n\n                                if (el.added) {\n                                    subClass = 'added';\n                                } else if (el.removed) {\n                                    subClass = 'removed';\n                                }\n\n                                return (\n                                    <tr key={`line-${index}`} className='line'>\n                                        <td className={`line-number original ${subClass}`}>{el.oldLineNum}</td>\n                                        <td className={`line-number changed ${subClass}`}>{el.newLineNum}</td>\n                                        <td className='line-content'><span className={subClass}>{el.value === '' ? '\\r' : el.value}</span></td>\n                                    </tr>\n                                )\n                            }\n                        })}\n                    </table>\n                }\n                {(!diffLines || diffLines.length === 0) &&\n                    <span className='no-changes'>{`<No changes>`}</span>\n                }\n            </div>\n        </div>\n    )\n}\n\nconst SmallCircularButton = ({\n    icon,\n    onClick,\n    children\n}) => {\n    return (\n        <button className='small-circular-button' onClick={onClick}>\n            <span className='material-icon'>{icon}</span>\n            {children}\n        </button>\n    )\n}\n\nconst SelectedFile = ({\n    file,\n    onRemoveClick,\n}) => {\n    return (\n        <div className='file'>\n            <span className='name'>{file.name}</span>\n            <SmallCircularButton icon='close' onClick={onRemoveClick} />\n        </div>\n    )\n}\n\nfunction App() {\n    const [diffModule, diffModuleLoading] = useImport('https://cdn.jsdelivr.net/npm/diff@5.2.0/+esm');\n    const [differMode, setDifferMode] = useState(getCachedOption(CACHE_IDS.DIFFER_MODE, 'file'));\n    const [originalTarget, setOriginalTarget] = useState(getCachedOption(CACHE_IDS.ORIGINAL_TARGET));\n    const [changedTarget, setChangedTarget] = useState(getCachedOption(CACHE_IDS.CHANGED_TARGET));\n    const [showChangesOnly, setShowChangesOnly] = useState(getCachedOption(CACHE_IDS.CHANGES_ONLY, true));\n    const [showEntireTag, setShowEntireTag] = useState(getCachedOption(CACHE_IDS.ENTIRE_TAG, false));\n    const [botCompareTag, setBotCompareTag] = useState(getCachedOption(CACHE_IDS.BOT_COMPARE_TAG));\n    const [botDiffs, setBotDiffs] = useState();\n    const [version, setVersion] = useState();\n    const [errors, setErrors] = useState();\n    const [versionDate, setVersionDate] = useState();\n    const [botChangeCount, setBotChangeCount] = useState();\n    const [tagChangeCount, setTagChangeCount] = useState();\n    const [settingsChanged, setSettingsChanged] = useState(false);\n    const [firstDiff, setFirstDiff] = useState(true);\n    const [loadedFilesFromServer, setLoadedFilesFromServer] = useState(false);\n    const [diffProcessing, setDiffProcessing] = useState(false);\n\n    // on mount\n    useEffect(() => {\n        const packageInfoBot = getBot('system', 'rc-differ._packageInfo');\n\n        if (packageInfoBot) {\n            setVersion(packageInfoBot.raw.version);\n            setVersionDate(packageInfoBot.tags.versionDate.toLocaleString(DateTime.DATETIME_FULL));\n        }\n\n        tryFetchDataFromServer();\n    }, [])\n\n    const onCloseClick = useCallback(() => {\n        os.showConfirm({\n            title: 'Close Differ App',\n            content: 'Are you sure you want to close this app? You can use the chat command \"differ\" to re-open this later.',\n            cancelText: 'Cancel',\n            confirmText: 'Yes'\n        }).then((confirm) => {\n            if (confirm) {\n                thisBot.unmount();\n                configBot.tags.gridPortal = 'home';\n            }\n        })\n    }, []);\n\n    const tryFetchDataFromServer = useCallback(async () => {\n        const url = new URL(configBot.tags.url);\n        const httpPort = url.searchParams.get('httpPort');\n\n        if (!httpPort) {\n            return;\n        }\n\n        try {\n            const response = await self.fetch(`http://localhost:${httpPort}/diff-data`);\n            if (!response.ok) {\n                throw new Error(`HTTP error! Status: ${response.status}`);\n            }\n\n            const json = await response.json();\n            console.log('response json:', json);\n\n            setOriginalTarget({\n                name: json.originalName,\n                data: JSON.parse(json.original),\n            })\n\n            setChangedTarget({\n                name: json.modifiedName,\n                data: JSON.parse(json.modified)\n            })\n\n            setLoadedFilesFromServer(true);\n        } finally {\n            // Tell the server to shutdown.\n            self.fetch(`http://localhost:${httpPort}/shutdown`);\n        }\n    }, [])\n\n    const clearDiffState = useCallback(() => {\n        setOriginalTarget(null);\n        setChangedTarget(null);\n        setCachedOption(CACHE_IDS.ORIGINAL_TARGET, null);\n        setCachedOption(CACHE_IDS.CHANGED_TARGET, null);\n        setBotDiffs(null);\n        setBotChangeCount(null);\n        setTagChangeCount(null);\n        setErrors(null);\n    }, [])\n\n    const processDiff = useCallback(async () => {\n        if (!originalTarget || !changedTarget) {\n            return;\n        }\n\n        console.log('==== process diff start ====');\n\n        setDiffProcessing(true);\n\n        let compareTag = botCompareTag ? botCompareTag : DEFAULT_BOT_COMPARE_TAG;\n        let errors = [];\n        let botDiffs = [];\n        let botChangeCount = 0;\n        let tagChangeCount = 0;\n\n        const onCreateBotMapError = (errorMessage) => {\n            errors.push(errorMessage);\n        }\n\n        if (differMode === 'file') {\n            let originalBotMap = await createCompareTagToBotMap(originalTarget, compareTag, onCreateBotMapError);\n            let changedBotMap = await createCompareTagToBotMap(changedTarget, compareTag, onCreateBotMapError);\n\n            const fileDiff = await processFileDiff({\n                originalBotMap,\n                changedBotMap,\n                fileName: null, // No specific filename for single file mode\n                showChangesOnly,\n                diffModule\n            });\n\n            botChangeCount += fileDiff.botChangeCount;\n            tagChangeCount += fileDiff.tagChangeCount;\n            botDiffs.push(...fileDiff.botDiffs);\n\n        } else if (differMode === 'folder') {\n            // Multiple files diff - group by filename\n            const originalFiles = Array.isArray(originalTarget) ? originalTarget : [originalTarget];\n            const changedFiles = Array.isArray(changedTarget) ? changedTarget : [changedTarget];\n\n            // Create maps by filename\n            const originalFileMap = {};\n            const changedFileMap = {};\n\n            originalFiles.forEach(file => {\n                originalFileMap[file.name] = file;\n            });\n\n            changedFiles.forEach(file => {\n                changedFileMap[file.name] = file;\n            });\n\n            // Get all unique filenames\n            const allFilenames = new Set([\n                ...Object.keys(originalFileMap),\n                ...Object.keys(changedFileMap)\n            ]);\n\n            // Process each file and create file groups\n            const fileGroups = [];\n\n            for (const filename of Array.from(allFilenames).sort()) {\n                const originalFile = originalFileMap[filename] || null;\n                const changedFile = changedFileMap[filename] || null;\n\n                // Determine file status\n                let fileStatus = 'modified'; // default\n                if (!originalFile && changedFile) {\n                    fileStatus = 'new';\n                } else if (originalFile && !changedFile) {\n                    fileStatus = 'removed';\n                }\n\n                let originalBotMap = {};\n                let changedBotMap = {};\n\n                if (originalFile) {\n                    originalBotMap = await createCompareTagToBotMap(originalFile, compareTag, onCreateBotMapError);\n                }\n\n                if (changedFile) {\n                    changedBotMap = await createCompareTagToBotMap(changedFile, compareTag, onCreateBotMapError);\n                }\n\n                const fileDiff = await processFileDiff({\n                    originalBotMap,\n                    changedBotMap,\n                    fileName: filename,\n                    showChangesOnly,\n                    diffModule\n                });\n\n                // Update file status based on actual changes detected\n                const hasActualChanges = fileDiff.botDiffs.some(botDiff => \n                    botDiff.tagDiffs.some(tagDiff => \n                        tagDiff.diff.some(d => d.added || d.removed)\n                    )\n                );\n\n                // Update file status based on actual changes detected\n                if (fileStatus === 'modified' && !hasActualChanges) {\n                    fileStatus = 'no-changes';\n                }\n\n                // For removed files, we still want to show them even if showChangesOnly is true\n                // For new files, we also want to show them\n                // For modified files, respect the showChangesOnly setting\n                // For no-changes files, only show if showChangesOnly is false\n                const shouldIncludeFile = fileStatus === 'new' ||\n                    fileStatus === 'removed' ||\n                    fileStatus === 'no-changes' && !showChangesOnly ||\n                    (!showChangesOnly || fileDiff.botDiffs.length > 0);\n\n                if (shouldIncludeFile) {\n                    botChangeCount += fileDiff.botChangeCount;\n                    tagChangeCount += fileDiff.tagChangeCount;\n\n                    // Create a file group containing all bots for this file\n                    fileGroups.push({\n                        fileName: filename,\n                        status: fileStatus, // Add status to file group\n                        botChangeCount: fileDiff.botChangeCount,\n                        tagChangeCount: fileDiff.tagChangeCount,\n                        botDiffs: fileDiff.botDiffs.map(botDiff => ({\n                            ...botDiff,\n                            fileName: undefined // Remove fileName from individual bots since it's in the group\n                        }))\n                    });\n                }\n            }\n\n            botDiffs = fileGroups;\n        }\n\n        if (errors.length > 0) {\n            setErrors(errors);\n        } else {\n            setErrors(null);\n        }\n\n        // console.log('bot diffs:', self.structuredClone(botDiffs));\n\n        setBotDiffs(botDiffs);\n        setFirstDiff(false);\n        setBotChangeCount(botChangeCount);\n        setTagChangeCount(tagChangeCount);\n\n        console.log('==== process diff end ====');\n        setDiffProcessing(false);\n    }, [diffModule, differMode, originalTarget, changedTarget, showChangesOnly, botCompareTag]);\n\n    async function processFileDiff({\n        originalBotMap,\n        changedBotMap,\n        fileName,\n        showChangesOnly,\n        diffModule\n    }) {\n        let botDiffs = [];\n        let botChangeCount = 0;\n        let tagChangeCount = 0;\n\n        let compareKeys = new Set([\n            ...Object.keys(originalBotMap),\n            ...Object.keys(changedBotMap)\n        ]);\n        compareKeys = Array.from(compareKeys).sort();\n\n        for (let compareKey of compareKeys) {\n            let originalBot = originalBotMap[compareKey];\n            let changedBot = changedBotMap[compareKey];\n            let tagDiffs = [];\n            let hasBotChanged = false;\n\n            let tagNames = new Set([\n                ...Object.keys((originalBot ?? {}).tags ?? {}),\n                ...Object.keys((changedBot ?? {}).tags ?? {})\n            ]);\n            tagNames = Array.from(tagNames).sort();\n\n            for (let tagName of tagNames) {\n                const originalTagValue = convertToDiffableString(((originalBot ?? {}).tags ?? {})[tagName]);\n                const changedTagValue = convertToDiffableString(((changedBot ?? {}).tags ?? {})[tagName]);\n\n                const diff = diffModule.diffLines(originalTagValue, changedTagValue);\n\n                const changesDetected = diff.some(d => d.added || d.removed);\n                if (!showChangesOnly || (showChangesOnly && changesDetected)) {\n                    if (changesDetected) {\n                        if (!hasBotChanged) {\n                            hasBotChanged = true;\n                            botChangeCount++;\n                        }\n                        tagChangeCount++;\n                    }\n\n                    tagDiffs.push({\n                        botCompareKey: compareKey,\n                        tag: tagName,\n                        diff: diff,\n                    });\n                }\n            }\n\n            if (tagDiffs.length > 0) {\n                botDiffs.push({\n                    botCompareKey: compareKey,\n                    fileName: fileName, // Add filename to bot diff\n                    tagDiffs,\n                });\n            }\n        }\n\n        return {\n            botDiffs,\n            botChangeCount,\n            tagChangeCount\n        };\n    }\n\n    const onModeChange = useCallback((event) => {\n        const mode = event.currentTarget.value;\n        setCachedOption(CACHE_IDS.DIFFER_MODE, mode);\n        setDifferMode(mode);\n        clearDiffState();\n    }, [clearDiffState]);\n\n    const onChooseClick = useCallback(async (clickEvent, setter, configBotVar = null) => {\n        let target;\n\n        if (differMode === 'file') {\n            let sourceMode = undefined;\n\n            if (clickEvent.shiftKey) {\n                sourceMode = 'file';\n            }\n\n            const chooseFromOptions = [\n                { label: 'From computer', value: 'file' },\n                { label: 'From ab egg', value: 'egg' }\n            ]\n\n            let selectedOption;\n\n            if (sourceMode == undefined) {\n                const lastSelectedOptionIndex = getCachedOption(CACHE_IDS.LAST_SELECTED_CHOOSE_FROM_OPTION, 0);\n\n                selectedOption = await os.showInput(lastSelectedOptionIndex, {\n                    title: 'Source',\n                    type: 'list',\n                    subtype: 'radio',\n                    items: chooseFromOptions\n                });\n\n                if (!selectedOption) {\n                    return null;\n                }\n\n                const selectedOptionIndex = chooseFromOptions.findIndex(o => o.value === selectedOption.value);\n\n                if (selectedOptionIndex !== lastSelectedOptionIndex) {\n                    setCachedOption(CACHE_IDS.LAST_SELECTED_CHOOSE_FROM_OPTION, selectedOptionIndex);\n                }\n            } else {\n                selectedOption = chooseFromOptions.find(o => o.value === sourceMode);\n\n                if (!selectedOption) {\n                    return null;\n                }\n            }\n\n            if (selectedOption.value === 'file') {\n                target = await selectAuxFile();\n            } else if (selectedOption.value = 'egg') {\n                target = await selectAuxFileFromEgg();\n            }\n        } else if (differMode === 'folder') {\n            target = await selectAuxFiles();\n        } else {\n            console.error(`Differ mode ${diffModule} is not implemented in onChooseClick.`);\n        }\n\n        if (target) {\n            setCachedOption(configBotVar, target);\n            setter(target);\n            setLoadedFilesFromServer(false);\n        }\n\n    }, [differMode]);\n\n    const onRemoveFileClick = useCallback(({\n        setter,\n        fileName,\n        configBotVar\n    }) => {\n        if (differMode === 'file') {\n            setter(null);\n            setCachedOption(configBotVar, null);\n        } else if (differMode === 'folder') {\n            let newValue = null;\n\n            setter((prev) => {\n                newValue = prev.filter(file => file.name !== fileName);\n                return newValue;\n            });\n\n            setCachedOption(configBotVar, newValue);\n        } else {\n            console.error(`Differ mode ${differMode} is not implemented in onRemoveFileClick.`);\n        }\n    }, [differMode]);\n\n    const onChangesOnlyCheckbox = useCallback((event) => {\n        const checked = event.currentTarget.checked;\n        setCachedOption(CACHE_IDS.CHANGES_ONLY, checked);\n        setShowChangesOnly(checked);\n        setSettingsChanged(true);\n    }, [])\n\n    const onEntireTagCheckbox = useCallback((event) => {\n        const checked = event.currentTarget.checked;\n        setCachedOption(CACHE_IDS.ENTIRE_TAG, checked);\n        setShowEntireTag(checked);\n        setSettingsChanged(true);\n    }, [])\n\n    const onBotCompareTagChange = useCallback((event) => {\n        const value = event.currentTarget.value;\n        setCachedOption(CACHE_IDS.BOT_COMPARE_TAG, value);\n        setBotCompareTag(value);\n        setSettingsChanged(true);\n    }, [])\n\n    // Automatically process diff when loading files from the server.\n    useEffect(() => {\n        if (loadedFilesFromServer && originalTarget && changedTarget) {\n            processDiff();\n        }\n    }, [loadedFilesFromServer, originalTarget, changedTarget, processDiff])\n\n    // Re-process diff when settings are changed.\n    useEffect(() => {\n        if (settingsChanged) {\n            if (!firstDiff) {\n                // console.log('settings changed on active diff - going to re-process!');\n                processDiff();\n            } else {\n                // console.log('settings changed but first diff hasnt been done yet');\n            }\n        } else {\n            // console.log('settings changed set back to false')\n        }\n\n        setSettingsChanged(false);\n    }, [settingsChanged, firstDiff, processDiff])\n\n\n    const onDownloadMergedFile = useCallback(() => {\n        /** Ryan's Merge logic notes:\n         * \n         * If none - merge\n         * If added and removed - choose\n         * If removed and added - choose\n         * If removed only - merge\n         * If added only - merge\n         */\n\n\n        console.log('onDownloadMergedFile');\n    }, [originalTarget, changedTarget])\n\n    const botDiffsHash = useMemo(() => {\n        let stateData = [];\n\n        if (botDiffs) {\n            stateData.push(botDiffs);\n        }\n\n        stateData.push({\n            showChangesOnly,\n            showEntireTag,\n        })\n\n        return crypto.sha256(stateData);\n    }, [botDiffs, showChangesOnly, showEntireTag])\n\n    return (\n        <>\n            <style>{tags['style.css']}</style>\n            <div className='diff-app'>\n                <div className='diff-app-container'>\n                    <h1>RC AUX Differ</h1>\n                    <div className='version-info'>\n                        <div>Version: {version}</div>\n                        <div>Date: {versionDate}</div>\n                        <div>Author: Ryan Cook {'('}<a href=\"https://github.com/Blitzy\" target=\"_blank\">GitHub</a> | <a href=\"mailto:ryan.cook@yeticgi.com\">Email</a>{')'}</div>\n                    </div>\n                    <button className='close-button' onClick={onCloseClick}>Close</button>\n                    {diffModuleLoading &&\n                        <h2>Loading...</h2>\n                    }\n                    {!diffModuleLoading &&\n                        <>\n                            <div className='mode-selection'>\n                                <label for='mode-select'>Differ Mode</label>\n                                <select name='mode' id='mode-select' onChange={onModeChange}>\n                                    <option value='file' selected={differMode === 'file'}>File</option>\n                                    <option value='folder' selected={differMode === 'folder'}>Folder</option>\n                                </select>\n                            </div>\n                        <div className='files-selection'>\n                            <div className='files'>\n                                <button onClick={(clickEvent) => onChooseClick(clickEvent, setOriginalTarget, CACHE_IDS.ORIGINAL_TARGET)}>\n                                    {differMode === 'file' ? 'Choose Original AUX' : 'Choose Original Folder'}\n                                </button>\n                                {originalTarget && (\n                                    Array.isArray(originalTarget) ? (\n                                        getSortedFiles(originalTarget).map((file) =>\n                                            <SelectedFile\n                                                key={file.name}\n                                                file={file}\n                                                onRemoveClick={() => onRemoveFileClick({\n                                                    setter: setOriginalTarget,\n                                                    fileName: file.name,\n                                                    configBotVar: CACHE_IDS.ORIGINAL_TARGET\n                                                })}\n                                            />\n                                        )\n                                    ) : (\n                                        <SelectedFile\n                                            file={originalTarget}\n                                            onRemoveClick={() => onRemoveFileClick({\n                                                setter: setOriginalTarget,\n                                                configBotVar: CACHE_IDS.ORIGINAL_TARGET\n                                            })}\n                                        />\n                                    )\n                                )}\n                            </div>\n                            <div className='files'>\n                                <button onClick={(clickEvent) => onChooseClick(clickEvent, setChangedTarget, CACHE_IDS.CHANGED_TARGET)}>\n                                    {differMode === 'file' ? 'Choose Changed AUX' : 'Choose Changed Folder'}\n                                </button>\n                                {changedTarget && (\n                                    Array.isArray(changedTarget) ? (\n                                        getSortedFiles(changedTarget).map((file) =>\n                                            <SelectedFile\n                                                key={file.name}\n                                                file={file}\n                                                onRemoveClick={() => onRemoveFileClick({\n                                                    setter: setChangedTarget,\n                                                    fileName: file.name,\n                                                    configBotVar: CACHE_IDS.CHANGED_TARGET\n                                                })}\n                                            />\n                                        )\n                                    ) : (\n                                        <SelectedFile\n                                            file={changedTarget}\n                                            onRemoveClick={() => onRemoveFileClick({\n                                                setter: setChangedTarget,\n                                                configBotVar: CACHE_IDS.CHANGED_TARGET\n                                            })}\n                                        />\n                                    )\n                                )}\n                            </div>\n                        </div>\n\n                            <div className='diff-options'>\n                                <div className='option'>\n                                    <label for='bot-compare-tag'>Bot Compare Tag</label><br />\n                                    <input type='text' id='bot-compare-tag' name='bot-compare-tag' placeholder={botCompareTag ? null : DEFAULT_BOT_COMPARE_TAG} value={botCompareTag ? botCompareTag : null} onChange={onBotCompareTagChange}></input>\n                                </div>\n                                <div className='option'>\n                                    <label for='changes-only'>Changed Tags Only</label>\n                                    <input type='checkbox' id='changes-only' name='changes-only' checked={showChangesOnly} onChange={onChangesOnlyCheckbox} />\n                                </div>\n                                <div className='option'>\n                                    <label for='entire-tag'>Show Entire Tag</label>\n                                    <input type='checkbox' id='entire-tag' name='entire-tag' checked={showEntireTag} onChange={onEntireTagCheckbox} />\n                                </div>\n                            </div>\n                            <div className='diff-button-group'>\n                                <button className='diff-button' onClick={processDiff} disabled={diffProcessing}>Diff</button>\n                                {diffProcessing &&\n                                    <div className='diff-processing'>diff processing...</div>\n                                }\n                            </div>\n                            {false && <button className='download-button' onClick={onDownloadMergedFile}>Download Merged File</button>}\n\n                            {(errors && errors.length) &&\n                                <div className='diff-errors'>\n                                    <h2>Errors ({errors.length})</h2>\n                                    <div className='errors'>\n                                        {errors.map((error) => {\n                                            return (\n                                                <div className='error'>\n                                                    <span className='icon'>❗</span>\n                                                    <span className='message'>{error}</span>\n                                                </div>)\n                                        })}\n                                    </div>\n                                </div>\n                            }\n                            <div className='diffs-container' key={botDiffsHash}>\n                                {botChangeCount != null &&\n                                    <div className='change-count'>{botChangeCount} bot(s) changed.</div>\n                                }\n                                {tagChangeCount != null &&\n                                    <div className='change-count'>{tagChangeCount} tag(s) changed.</div>\n                                }\n                                {botDiffs &&\n                                    botDiffs.map((el, index) => {\n                                        // Check if this is a file group (folder mode) or individual bot diff (file mode)\n                                        if (el.fileName && el.botDiffs) {\n                                            // This is a file group from folder mode\n                                            return <FileGroup key={index} fileGroup={el} showEntireTag={showEntireTag} />\n                                        } else {\n                                            // This is an individual bot diff from file mode\n                                            return <BotDiff key={index} botDiff={el} showEntireTag={showEntireTag} />\n                                        }\n                                    })\n                                }\n                            </div>\n                        </>\n                    }\n                </div>\n            </div>\n        </>\n    )\n}\n\nreturn App;",
        "forceUpdate": "@const App = thisBot.vars.appInstance;\n\nif (App) {\n    os.compileApp(tags.system, <App/>)\n}\n",
        "initialize": "@const packageBot = getBot('system', 'rc-differ._packageInfo');\nconfigBot.tags.pageTitle = `RC AUX Differ v${packageBot.raw.version} (${configBot.tags.inst})`;\n\nconst url = new URL(configBot.tags.url);\n\nconst differParam = url.searchParams.get('differ');\nif (differParam !== 'false') {\n    thisBot.mount();\n}\n",
        "mount": "@if (!thisBot.vars.appInstance) {\n    thisBot.vars.appInstance = await thisBot.App();\n    await os.registerApp(tags.system, thisBot);\n\n    thisBot.forceUpdate();\n}\n",
        "onChat": "@const { message } = that;\n\nif (message === 'differ') {\n    await thisBot.unmount();\n    await thisBot.mount();\n\n    os.hideChat();\n}",
        "onDestroy": "@thisBot.unmount();",
        "onEggHatch": "@thisBot.initialize();",
        "onInstJoined": "@thisBot.initialize();",
        "style.css": ".material-icon { \n    font-family: 'Material Icons';\n    font-weight: normal;\n    font-style: normal;\n    font-size: 24px;  /* Preferred icon size */\n    display: inline-block;\n    line-height: 1;\n    text-transform: none;\n    letter-spacing: normal;\n    word-wrap: normal;\n    white-space: nowrap;\n    direction: ltr;\n\n    /* Support for all WebKit browsers. */\n    -webkit-font-smoothing: antialiased;\n    /* Support for Safari and Chrome. */\n    text-rendering: optimizeLegibility;\n\n    /* Support for Firefox. */\n    -moz-osx-font-smoothing: grayscale;\n\n    /* Support for IE. */\n    font-feature-settings: 'liga';\n}\n\n.diff-app {\n    width: 100%;\n    height: 100%;\n    overflow-y: auto;\n    overflow-x: auto;\n    background-color: white;\n    padding: 12px;\n    z-index: 1;\n}\n\n.diff-app button {\n    font-family: Roboto;\n    font-size: 0.95em;\n    background-color: rgb(102 102 102);\n    padding: 6px 12px;\n    border-radius: 4px;\n    border-style: solid;\n    border-width: 1px;\n    border-color: #00000000;\n    letter-spacing: 0.05em;\n    color: white;\n    text-transform: uppercase;\n    box-shadow: 0px 1px 4px 0px #0000003d;\n    font-weight: 500;\n    cursor: pointer;\n}\n\n.diff-app button:disabled {\n    opacity: 0.5;\n    cursor: auto;\n}\n\n.diff-app button.small-circular-button {\n    color: white;\n    background-color: rgb(72, 72, 72);\n    padding: 0;\n    border-radius: 50%;\n    /* box-shadow: none; */\n    line-height: 0.5;\n    user-select: none;\n}\n.diff-app button.small-circular-button .material-icon {\n    font-size: 18px;\n}\n\n/* CSS to target devices that have hover capabilities (typically non-touchscreen devices) */\n@media (hover: hover) and (pointer: fine) {\n    .diff-app button:hover:enabled {\n        filter: brightness(1.2);\n    }\n}\n\n.diff-app-container {\n}\n\n.diff-app-container .version-info {\n    color: dimgray;\n    margin-bottom: 24px;\n    width: fit-content;\n}\n\n.diff-app-container .close-button {\n    background-color: rgb(42 42 42);\n}\n\n.diff-app-container .diff-button {\n    background-color: rgb(56 178 56);\n}\n.diff-app-container .download-button {\n    background-color: rgb(56, 121, 178);\n}\n\n.diff-button-group {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n}\n\n.diff-button-group .diff-processing {\n    margin-left: 16px;\n}\n\n.diff-options {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-items: flex-end;\n    gap: 24px;\n    border-style: solid;\n    border-width: 1px;\n    border-radius: 4px;\n    border-color: rgb(0 0 0 / 51%);\n    padding: 8px;\n    background-color: rgb(235 235 235);\n    width: fit-content;\n    margin-top: 24px;\n    margin-bottom: 24px;\n}\n\n.diff-errors{\n    margin-top: 24px;\n}\n\n.diff-errors h2 {\n    color: #ff3131;\n    margin-bottom: 8px;\n}\n\n.diff-errors .errors {\n}\n\n.diff-errors .error {\n    color: white;\n    line-height: normal;\n    font-size: 1.05em;\n    font-weight: 500;\n}\n\n.diff-errors .error:not(first-child) {\n    margin-top: 4px;\n}\n\n.diff-errors .error .icon {\n    vertical-align: middle;\n    font-size: 1.5em;\n}\n\n.diff-errors .error .message {\n    background-color: #ff3131;\n    padding: 2px 8px;\n}\n\n.mode-selection {\n    margin-top: 24px;\n}\n\n.files-selection {\n    display: flex;\n    flex-direction: row;\n    gap: 64px;\n    margin-top: 24px;\n}\n\n.files-selection .files .file {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    margin-top: 4px;\n}\n\n.files-selection .files .file .name {\n    margin-right: 8px;\n}\n\n.diffs-container {    \n    margin-top: 24px;\n    /* width: fit-content; */\n    max-width: min(1280px, 100%);\n    opacity: 1;\n    animation: update-blink 0.5s ease-out;\n}\n\n.diffs-container .bot-diff:not(:first-child) {\n    margin-top: 32px;\n}\n\n@keyframes update-blink {\n    from {\n        opacity: 0;\n    }\n    to {\n        opacity: 1;\n    }\n}\n\n.bot-diff {\n    border-color: black;\n    border-width: 1px;\n    border-style: solid;\n    border-radius: 8px;\n    box-sizing: border-box;\n}\n\n.bot-diff:not(first-child) {\n    margin-top: 24px;\n}\n\n.bot-diff .file-name {\n    font-weight: bold;\n    font-size: 1.3em;\n    color: #1a365d;\n    background: linear-gradient(135deg, #e6f3ff 0%, #cce7ff 100%);\n    border: 1px solid #7cb9e8;\n    border-radius: 6px;\n    padding: 8px 12px;\n    margin: -1px -1px 8px -1px; /* Negative margins to align with bot-diff border */\n    border-bottom: 2px solid #4a90d9;\n    box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n}\n\n.bot-diff:has(.file-name) {\n    border-top: 3px solid #4a90d9;\n    margin-top: 40px;\n}\n\n.bot-diff:has(.file-name):first-child {\n    margin-top: 24px; /* Keep normal top margin for first item */\n}\n\n.bot-diff .bot-name {   \n    font-weight: bold;\n    font-size: 1.2em;\n    align-content: center;\n    height: 2.2em;\n    padding-left: 10px;\n    padding-right: 10px;\n    padding-top: 4px;\n    padding-bottom: 4px;\n    border-top-left-radius: 8px;\n    border-top-right-radius: 8px;\n    color: #e2fbff;\n    background-color: #245e9f;\n    overflow-x: clip;\n}\n\n.bot-tags {\n    margin-top: 8px;\n    margin-bottom: 8px;\n}\n.tag-diff {\n    margin-top: 10px;\n    margin-left: 10px;\n    margin-right: 10px;\n    border-color: rgba(0, 0, 0, 0.56);\n    border-style: solid;\n    border-width: 1px;\n    border-radius: 8px;\n    box-sizing: border-box;\n}\n\n.tag-diff .tag-name {\n    background-color: #b8d5ff;\n    color: #253c5b;\n    font-weight: bold;\n    font-size: 1.1em;\n    align-content: center;\n    height: 1.7em;\n    padding-left: 10px;\n    padding-right: 10px;\n    border-top-left-radius: 8px;\n    border-top-right-radius: 8px;\n}\n\n.tag-content {\n    line-height: normal;\n    font-family: monospace;\n    padding-bottom: 4px;\n    padding-top: 4px;\n    overflow-x: auto;\n}\n\n.tag-content .no-changes { \n    padding-left: 10px;\n    font-style: italic;\n    color: #969696;\n    font-size: 1em;\n}\n\n.tag-content table {\n    border-collapse: collapse;\n}\n\n.tag-content table td {\n    padding: 0;\n}\n\n.tag-content .line {\n    white-space: pre-wrap;\n}\n\n.tag-content .line .removed {\n    background-color: #ff3131;\n    color: white;\n}\n\n.tag-content .line .added {\n    background-color: #48dd48;\n    color: #041e02;\n}\n\n.tag-content .divider {\n    font-size: 0.93em;\n}\n\n.tag-content .divider .line-number {\n    color: #8a8a8a;\n    line-height: 1.4em;\n    letter-spacing: -0.2em;\n    background-color: #c9c9c9;\n}\n\n.tag-content .divider .line-content {\n    background-color: #dadada;\n    color: #5d5d5d;\n    padding-left: 8px;\n    padding-top: 4px;\n    padding-bottom: 4px;\n}\n\n.tag-content .line-number {\n    min-width: 28px;\n    padding-left: 8px;\n    padding-right: 8px;\n    text-align: right;\n    vertical-align: top;\n    color: #979797;\n    user-select: none;\n}\n\n.tag-content .line-number.added {\n    background-color: #33c833;\n    color: #0b500e;\n}\n\n.tag-content .line-number.removed {\n    background-color: #e72f2f;\n    color: #ffe2e2;\n}\n\n.tag-content .line-content .added {\n}\n\n.tag-content .line-content .removed {\n}\n\n.tag-content .line-content {\n    width: 100%;\n}\n\n.diff-options .option {\n    \n}\n\n.diff-options .option:not(first-child) {\n    /* margin-top: 12px; */\n}\n\n.file-group {\n    margin-top: 32px;\n}\n\n.file-group .file-header {\n    cursor: pointer;\n    user-select: none;\n    transition: background-color 0.2s ease;\n}\n\n.file-group .file-header:hover {\n    background-color: rgba(74, 144, 217, 0.05);\n}\n\n.file-group .file-name {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    font-weight: bold;\n    font-size: 1.4em;\n    color: #1a365d;\n    background: linear-gradient(135deg, #e6f3ff 0%, #cce7ff 100%);\n    border: 2px solid #4a90d9;\n    border-radius: 8px;\n    padding: 12px 16px;\n    margin-bottom: 12px;\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n.file-group .file-name .collapse-icon {\n    font-size: 1.2em;\n    transition: transform 0.2s ease;\n    flex-shrink: 0;\n}\n\n.file-group .file-stats {\n    margin-bottom: 16px;\n    padding-left: 16px;\n}\n\n.file-group .file-stats .change-count {\n    color: #666;\n    font-size: 0.9em;\n    margin-bottom: 4px;\n}\n\n.file-group .file-bots .bot-diff {\n    margin-top: 16px;\n}\n\n.file-group .file-bots .bot-diff:first-child {\n    margin-top: 0;\n}\n\n.file-status-badge {\n    display: inline-block;\n    padding: 4px 8px;\n    margin-left: 12px;\n    border-radius: 12px;\n    font-size: 0.75em;\n    font-weight: 600;\n    letter-spacing: 0.5px;\n    text-transform: uppercase;\n    line-height: 1;\n    box-shadow: 0 1px 2px rgba(0,0,0,0.1);\n}\n\n.file-status-badge.badge-new {\n    background-color: #10b981;\n    color: white;\n}\n\n.file-status-badge.badge-removed {\n    background-color: #ef4444;\n    color: white;\n}\n\n.file-status-badge.badge-modified {\n    background-color: #f59e0b;\n    color: white;\n} \n\n.file-status-badge.badge-no-changes {\n    background-color: #6b7280;\n    color: white;\n}\n\n/* Optional: Add hover effects for badges */\n@media (hover: hover) and (pointer: fine) {\n    .file-status-badge:hover {\n        transform: translateY(-1px);\n        box-shadow: 0 2px 4px rgba(0,0,0,0.15);\n    }\n}",
        "system": "rc-differ.app",
        "unmount": "@if (thisBot.vars.appInstance) {\n    delete thisBot.vars.appInstance;\n\n    // Compiling the app with an empty root value is a workaround that allows the\n    // previous components to perform their unmounting code properly.\n    await os.compileApp(tags.system, <></>);\n\n    await os.unregisterApp(tags.system);\n}\n"
      }
    }
  }
}