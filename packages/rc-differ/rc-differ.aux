{
  "version": 1,
  "state": {
    "rc-differ._packageInfo": {
      "id": "rc-differ._packageInfo",
      "space": "shared",
      "tags": {
        "system": "rc-differ._packageInfo",
        "version": "1.0",
        "versionDate": "📅2024-04-19T13:45:53.855-04:00 local"
      }
    },
    "rc-differ.app": {
      "id": "rc-differ.app",
      "space": "shared",
      "tags": {
        "App": "@const { useState, useCallback, useEffect } = os.appHooks;\n\nfunction getCachedOption(name) {\n    if (configBot) {\n        if (!configBot.vars.rcDifferOptionCache) {\n            configBot.vars.rcDifferOptionCache = {};\n        }\n\n        return configBot.vars.rcDifferOptionCache[name];\n    }\n}\n\nfunction setCachedOption(name, value) {\n    if (configBot) {\n        if (!configBot.vars.rcDifferOptionCache) {\n            configBot.vars.rcDifferOptionCache = {};\n        }\n\n        configBot.vars.rcDifferOptionCache[name] = value;\n        console.log(`set cached option ${name}:`, {...configBot.vars.rcDifferOptionCache});\n    }\n}\n\nasync function selectAuxFile() {\n    const files = await os.showUploadFiles();\n    let auxFiles = files.filter((file) => {\n        if (file.name.endsWith('.aux')) {\n            return true;\n        } else {\n            return false;\n        }\n    })\n\n    if (auxFiles.length) {\n        if (auxFiles.length > 1) {\n            os.toast('Can only diff one file at a time.', 4);\n        }\n\n        let auxData = JSON.parse(auxFiles[0].data);\n\n        let auxFile = {\n            name: auxFiles[0].name,\n            data: auxData,\n        }\n\n        return auxFile;\n    } else {\n        return null;\n    }\n}\n\nfunction createCompareTagToBotMap(auxFile, compareTag, onError) {\n    let botMap = {};\n\n    const auxData = auxFile.data;\n\n    for (let botId in auxData.state) {\n        let botData = auxData.state[botId];\n        \n        let compareTagValue = botData.tags[compareTag];\n        \n        if (compareTagValue) {\n            if (botMap[compareTagValue]) {\n                if (onError) {\n                    onError(`Bot with ${compareTag} tag value of ${compareTagValue} already exists in ${auxFile.name}`);\n                }\n            }\n\n            botMap[compareTagValue] = botData;\n        } else {\n            if (onError) {\n                onError(`Bot Id ${botId} in ${auxFile.name} does not specify the compare tag '${compareTag}'`);\n            }\n        }\n\n    }\n\n    return botMap;\n}\n\n/**\n * Convert the given value to a string that can be used with the jsdiff library.\n * Jsdiff doesnt like to be given anything other than strings, so this conversion is needed for undefined, null, booleans, etc.\n */\nfunction convertToDiffableString(value) {\n    if (value == null) {\n        return '';\n    } else if (typeof value.toString === 'function') {\n        return value.toString();\n    } else {\n        throw new Error('[convertToDiffableString] could not convert the given value to a string.');\n    }\n}\n\nfunction useImport(url) {\n    const [ lib, setLib ] = useState(null);\n    const [ loading, setLoading ] = useState(false);\n\n    // Import.\n    useEffect(() => {\n        async function load() {\n            setLoading(true);\n\n            try {\n                const lib = await import(url);\n                setLib(lib);\n            } catch(e) {\n                console.error('Failed to import:', url);\n                setLib(null);\n            } finally {\n                setLoading(false);\n            }\n        }\n\n        load();\n    }, [url]);\n\n    return [ lib, loading ];\n}\n\nfunction BotDiff({\n    botDiff \n}) {\n    return (\n        <div className='bot-diff'>\n            <div className='bot-name'>{botDiff.botCompareKey}</div>\n            <div className='bot-tags'>\n                {botDiff.tagDiffs.map((el, index) => {\n                    return <TagDiff key={index} tagDiff={el} />\n                })}\n            </div>\n        </div>\n    )\n}\n\nfunction TagDiff({\n    tagDiff,\n}) {\n    return (\n        <div className='tag-diff'>\n            <div className='tag-name'>{tagDiff.tag}</div>\n            <div className='tag-content'>\n                {tagDiff.diff.map((el) => {\n                    let spanClass;\n\n                    if (el.added) {\n                        spanClass = 'added';\n                    } else if (el.removed) {\n                        spanClass = 'removed';\n                    }\n                    \n                    return (\n                        <div><span className={spanClass}>{el.value}</span></div>\n                    )\n                })}\n            </div>\n        </div>\n    )\n}\n\nconst DEFAULT_BOT_COMPARE_TAG = 'system';\nconst CACHE_IDS = {\n    ORIGINAL_FILE: 'rc-differ-original-file',\n    CHANGED_FILE: 'rc-differ-changed-file',\n    CHANGES_ONLY: 'rc-differ-changed-only',\n    BOT_COMPARE_TAG: 'rc-differ-bot-compare-tag',\n}\n\nfunction App() {\n    const [diffModule, diffModuleLoading] = useImport('https://cdn.jsdelivr.net/npm/diff@5.2.0/+esm');\n    const [originalFile, setOriginalFile] = useState(getCachedOption(CACHE_IDS.ORIGINAL_FILE));\n    const [changedFile, setChangedFile] = useState(getCachedOption(CACHE_IDS.CHANGED_FILE));\n    const [showChangesOnly, setShowChangesOnly] = useState(getCachedOption(CACHE_IDS.CHANGES_ONLY));\n    const [botCompareTag, setBotCompareTag] = useState(getCachedOption(CACHE_IDS.BOT_COMPARE_TAG));\n    const [botDiffs, setBotDiffs] = useState();\n    const [version, setVersion] = useState();\n    const [errors, setErrors] = useState();\n    const [versionDate, setVersionDate] = useState();\n    const [botChangeCount, setBotChangeCount] = useState(null);\n    const [tagChangeCount, setTagChangeCount] = useState(null);\n    \n    // on mount\n    useEffect(() => {\n        const packageInfoBot = getBot('system', 'rc-differ._packageInfo');\n\n        if (packageInfoBot) {\n            setVersion(packageInfoBot.raw.version);\n            setVersionDate(packageInfoBot.tags.versionDate.toLocaleString(DateTime.DATETIME_FULL));\n        }\n    }, [])\n\n    const onCloseClick = useCallback(() => {\n        os.showConfirm({\n            title: 'Close Differ App',\n            content: 'Are you sure you want to close this app? You can use the chat command \"differ\" to re-open this later.',\n            cancelText: 'Cancel',\n            confirmText: 'Yes'\n        }).then((confirm) => {\n            if (confirm) {\n                thisBot.unmount();\n            }\n        })\n    }, []);\n\n    const processDiff = useCallback(() => {\n        if (!originalFile || !changedFile) {\n            return;\n        }\n\n\n        // Generate a bot map based on the specified compare tag.\n        // The compare tag is used as the way to identify which bots to compare against each other.\n        let compareTag = botCompareTag ? botCompareTag : DEFAULT_BOT_COMPARE_TAG; \n\n        let errors = [];\n        const onCreateBotMapError = (errorMessage) => {\n            errors.push(errorMessage);\n        }\n        \n        let originalBotMap = createCompareTagToBotMap(originalFile, compareTag, onCreateBotMapError);\n        let changedBotMap = createCompareTagToBotMap(changedFile, compareTag, onCreateBotMapError);\n\n        if (errors.length > 0) {\n            setErrors(errors);\n        } else {\n            setErrors(null);\n        }\n\n        // console.log('originalBotMap:', originalBotMap);\n        // console.log('changedBotMap:', changedBotMap);\n\n        let botDiffs = [];\n        let botChangeCount = 0;\n        let tagChangeCount = 0;\n\n        let compareKeys = new Set([\n            ...Object.keys(originalBotMap),\n            ...Object.keys(changedBotMap)\n        ]);\n        compareKeys = Array.from(compareKeys).sort();\n\n        // console.log('compareKeys:', [...compareKeys]);\n\n        for (let compareKey of compareKeys) {\n            let originalBot = originalBotMap[compareKey];\n            let changedBot = changedBotMap[compareKey];\n            let tagDiffs = [];\n            let hasBotChanged = false;\n\n            let tagNames = new Set([\n                ...Object.keys((originalBot ?? {}).tags ?? {}),\n                ...Object.keys((changedBot ?? {}).tags ?? {})\n            ]);\n            tagNames = Array.from(tagNames).sort();\n            // console.log('tagNames:', [...tagNames]);\n\n            for (let tagName of tagNames) {\n                // console.log('processing tag:', tagName);\n                \n                const originalTagValue = convertToDiffableString( ((originalBot ?? {}).tags ?? {})[tagName] );\n                const changedTagValue = convertToDiffableString( ((changedBot ?? {}).tags ?? {})[tagName] );\n                \n                // console.log(`${tagName} original value:`, originalTagValue);\n                // console.log(`${tagName} changed value:`, changedTagValue);\n\n                const diff = diffModule.diffLines(originalTagValue, changedTagValue);\n\n                const changesDetected = diff.some(d => d.added || d.removed);\n                if (!showChangesOnly || (showChangesOnly && changesDetected)) {\n                    if (changesDetected) {\n                        if (!hasBotChanged) {\n                            hasBotChanged = true;\n                            botChangeCount++;\n                        }\n\n                        tagChangeCount++;\n                        // console.log('changed detected! diff:', diff);\n                    } else {\n                        // console.log('no changed detected. diff:', diff);\n                    }\n\n                    tagDiffs.push({\n                        botCompareKey: compareKey,\n                        tag: tagName,\n                        diff: diff,\n                    });\n                }\n            }\n\n            if (tagDiffs.length > 0) {\n                botDiffs.push({\n                    botCompareKey: compareKey,\n                    tagDiffs,\n                })\n            }\n        }\n\n        // console.log('bot diffs:', self.structuredClone(botDiffs));\n        // console.log('bot change count:', botChangeCount);\n        // console.log('tag change count:', tagChangeCount);\n\n        setBotDiffs(botDiffs);\n        setBotChangeCount(botChangeCount);\n        setTagChangeCount(tagChangeCount);\n    }, [diffModule, originalFile, changedFile, showChangesOnly, botCompareTag]);\n\n    const onAddFileClick = useCallback(async (setFile, configBotVar = null) => {\n        const file = await selectAuxFile();\n        if (file) {\n            setCachedOption(configBotVar, file);\n            setFile(file);\n        }\n    }, []);\n\n    const onChangesOnlyCheckbox = useCallback((event) => {\n        const checked = event.currentTarget.checked;\n        setCachedOption(CACHE_IDS.CHANGES_ONLY, checked);\n        setShowChangesOnly(checked);\n    }, [])\n\n    const onBotCompareTagChange = useCallback((event) => {\n        const value = event.currentTarget.value;\n        setCachedOption(CACHE_IDS.BOT_COMPARE_TAG, value);\n        setBotCompareTag(value);\n    }, [])\n    \n    return (\n        <>\n            <style>{tags['style.css']}</style>\n            <div className='diff-app'>\n                <div className='diff-app-container'>\n                    <h1>RC AUX Package Differ</h1>\n                    <div className='version-info'>\n                        <div>Version: {version}</div>\n                        <div>Date: {versionDate}</div>\n                    </div>\n                    <button className='close-button' onClick={onCloseClick}>Close</button>\n                    {diffModuleLoading && \n                        <h2>Loading...</h2>\n                    }\n                    {!diffModuleLoading && \n                        <>\n                            <div className='files-selection'>\n                                <div className='files'>\n                                    <button onClick={() => onAddFileClick(setOriginalFile, CACHE_IDS.ORIGINAL_FILE)}>\n                                        Upload Original File\n                                    </button>\n                                    { originalFile && \n                                        <div>{originalFile.name}</div>\n                                    }\n                                </div>\n                                <div className='files'>\n                                    <button onClick={() => onAddFileClick(setChangedFile, CACHE_IDS.CHANGED_FILE)}>\n                                        Upload Changed File\n                                    </button>\n                                    { changedFile && \n                                        <div>{changedFile.name}</div>\n                                    }\n                                </div>\n                            </div>\n                            \n                            <div className='diff-options'>\n                                <div className='option'>\n                                    <label for='bot-compare-tag'>Bot Compare Tag</label><br/>\n                                    <input type='text' id='bot-compare-tag' name='bot-compare-tag' placeholder={botCompareTag ? null : DEFAULT_BOT_COMPARE_TAG} value={botCompareTag ? botCompareTag : null} onChange={onBotCompareTagChange}></input>\n                                </div>\n                                <div className='option'>\n                                    <label for='changes-only'>Changes Only</label>\n                                    <input type='checkbox' id='changes-only' name='changes-only'checked={showChangesOnly} onChange={onChangesOnlyCheckbox}  />\n                                </div>\n                            </div>\n                            <button className='diff-button' onClick={processDiff}>Diff</button>\n\n                            {(errors && errors.length) &&\n                                <div className='diff-errors'>\n                                    <h2>Errors ({errors.length})</h2>\n                                    <div className='errors'>\n                                        {errors.map((error) => {\n                                            return (\n                                                <div className='error'>\n                                                    <span className='icon'>❗</span>\n                                                    <span className='message'>{error}</span>\n                                                </div>)\n                                        })}\n                                    </div>\n                                </div>\n                            }\n                            <div className='diffs-container'>\n                                {botChangeCount != null &&\n                                    <div className='change-count'>{botChangeCount} bot(s) changed.</div>\n                                }\n                                {tagChangeCount != null &&\n                                    <div className='change-count'>{tagChangeCount} tag(s) changed.</div>\n                                }\n                                {botDiffs &&\n                                    botDiffs.map((el, index) => {\n                                        return <BotDiff key={index} botDiff={el} />\n                                    })\n                                }\n                            </div>\n                        </>\n                    }\n                </div>\n            </div>\n        </>\n    )\n}\n\nreturn App;",
        "forceUpdate": "@const App = thisBot.vars.appInstance;\n\nif (App) {\n    os.compileApp(tags.system, <App/>)\n}\n",
        "initialize": "@const url = new URL(configBot.tags.url);\n\nconst differParam = url.searchParams.get('differ');\nif (differParam !== 'false') {\n    thisBot.mount();\n}\n",
        "mount": "@if (!thisBot.vars.appInstance) {\n    thisBot.vars.appInstance = await thisBot.App();\n    await os.registerApp(tags.system, thisBot);\n\n    thisBot.forceUpdate();\n}\n",
        "onChat": "@const { message } = that;\n\nif (message === 'differ') {\n    await thisBot.unmount();\n    await thisBot.mount();\n}",
        "onDestroy": "@thisBot.unmount();",
        "onEggHatch": "@thisBot.initialize();",
        "onInstJoined": "@thisBot.initialize();",
        "style.css": ".diff-app {\n    width: 100%;\n    height: 100%;\n    overflow-y: auto;\n    overflow-x: auto;\n    background-color: white;\n    padding: 12px;\n    z-index: 1;\n}\n\n.diff-app button {\n    font-family: Roboto;\n    font-size: 0.95em;\n    background-color: rgb(102 102 102);\n    padding: 6px 12px;\n    border-radius: 4px;\n    border-style: solid;\n    border-width: 1px;\n    border-color: #00000000;\n    letter-spacing: 0.05em;\n    color: white;\n    text-transform: uppercase;\n    box-shadow: 0px 1px 4px 0px #0000003d;\n    font-weight: 500;\n}\n\n/* CSS to target devices that have hover capabilities (typically non-touchscreen devices) */\n@media (hover: hover) and (pointer: fine) {\n    .diff-app button:hover {\n        filter: brightness(1.2);\n        color: #ffffff;\n    }\n}\n\n.diff-app-container {\n    display: inline-block;\n}\n\n.diff-app-container .version-info {\n    color: dimgray;\n    margin-bottom: 24px;\n    width: fit-content;\n}\n\n.diff-app-container .close-button {\n    background-color: rgb(42 42 42);\n}\n\n\n.diff-app-container .diff-button {\n    background-color: rgb(56 178 56);\n}\n\n.diff-options {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-items: flex-end;\n    gap: 24px;\n    border-style: solid;\n    border-width: 1px;\n    border-radius: 4px;\n    border-color: rgb(0 0 0 / 51%);\n    padding: 8px;\n    background-color: rgb(235 235 235);\n    width: fit-content;\n    margin-top: 24px;\n    margin-bottom: 24px;\n}\n\n.diff-errors{\n    margin-top: 24px;\n}\n\n.diff-errors h2 {\n    color: #ff3131;\n    margin-bottom: 8px;\n}\n\n.diff-errors .errors {\n}\n\n.diff-errors .error {\n    color: white;\n    line-height: normal;\n    font-size: 1.05em;\n    font-weight: 500;\n}\n\n.diff-errors .error:not(first-child) {\n    margin-top: 4px;\n}\n\n.diff-errors .error .icon {\n    vertical-align: middle;\n    font-size: 1.5em;\n}\n\n.diff-errors .error .message {\n    background-color: #ff3131;\n    padding: 2px 8px;\n}\n\n.files-selection {\n    display: flex;\n    flex-direction: row;\n    gap: 64px;\n    margin-top: 24px;\n}\n\n.diffs-container {    \n    margin-top: 24px;\n    max-width: fit-content;\n}\n\n.bot-diff {\n    border-color: black;\n    border-width: 1px;\n    border-style: solid;\n    border-radius: 8px;\n    box-sizing: border-box;\n}\n\n.bot-diff:not(first-child) {\n    margin-top: 24px;\n}\n\n.bot-diff .bot-name {   \n    font-weight: bold;\n    font-size: 1.2em;\n    align-content: center;\n    height: 2.2em;\n    padding-left: 10px;\n    padding-right: 10px;\n    padding-top: 4px;\n    padding-bottom: 4px;\n    border-top-left-radius: 8px;\n    border-top-right-radius: 8px;\n    color: #e2fbff;\n    background-color: #245e9f;\n}\n\n.bot-tags {\n    margin-top: 8px;\n    margin-bottom: 8px;\n}\n.tag-diff {\n    margin-top: 10px;\n    margin-left: 10px;\n    margin-right: 10px;\n    border-color: rgba(0, 0, 0, 0.56);\n    border-style: solid;\n    border-width: 1px;\n    border-radius: 8px;\n    box-sizing: border-box;\n}\n\n.tag-diff .tag-name {\n    background-color: #d2d2d2;\n    color: #333333;\n    font-weight: bold;\n    font-size: 1.1em;\n    align-content: center;\n    height: 1.7em;\n    padding-left: 10px;\n    padding-right: 10px;\n    border-top-left-radius: 8px;\n    border-top-right-radius: 8px;\n}\n\n.tag-content {\n    line-height: normal;\n    padding-left: 16px;\n    font-family: monospace;\n    padding-right: 16px;\n    padding-bottom: 4px;\n    padding-top: 4px;\n}\n\n.tag-content div {\n    white-space: pre-wrap;\n}\n\n.tag-content .removed {\n    background-color: #ff3131;\n    color: white;\n}\n\n.tag-content .added {\n    background-color: #48dd48;\n    color: #041e02;\n}\n\n.diff-options .option {\n    \n}\n\n.diff-options .option:not(first-child) {\n    /* margin-top: 12px; */\n}",
        "system": "rc-differ.app",
        "unmount": "@if (thisBot.vars.appInstance) {\n    delete thisBot.vars.appInstance;\n\n    // Compiling the app with an empty root value is a workaround that allows the\n    // previous components to perform their unmounting code properly.\n    await os.compileApp(tags.system, <></>);\n\n    await os.unregisterApp(tags.system);\n}\n"
      }
    }
  }
}