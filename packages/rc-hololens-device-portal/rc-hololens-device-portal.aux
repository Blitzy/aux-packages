{
  "version": 1,
  "state": {
    "rc-hololens-device-portal.api": {
      "id": "rc-hololens-device-portal.api",
      "space": "shared",
      "tags": {
        "debug": "true",
        "getAuthorizationHeader": "@let username = configBot.tags.hl2dpUser;\nlet password = configBot.tags.hl2dpPass;\n\nif (!username) {\n    throw new Error(`Need to have HoloLens 2 Device Portal Username in URL query parameter: 'hl2dpUser'`);\n}\n\nif (!password) {\n    throw new Error(`Need to have HoloLens 2 Device Portal Password in URL query parameter: 'hl2dpPass'`);\n}\n\nfunction toBase64(input) {\n    var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    var str = '';\n    var i;\n\n    for (i = 0; i < input.length; i += 3) {\n        var a = input.charCodeAt(i) || 0;\n        var b = input.charCodeAt(i + 1) || 0;\n        var c = input.charCodeAt(i + 2) || 0;\n        var triple = (a << 0x10) + (b << 0x08) + c;\n\n        str += chars.charAt((triple >> 3 * 6) & 0x3F);\n        str += chars.charAt((triple >> 2 * 6) & 0x3F);\n        str += i + 1 < input.length ? chars.charAt((triple >> 1 * 6) & 0x3F) : '=';\n        str += i + 2 < input.length ? chars.charAt((triple >> 0 * 6) & 0x3F) : '=';\n    }\n\n    return str;\n}\n\n// Append 'auto-' to the front of the username to bypass CSRF protection.\n// Reference: https://learn.microsoft.com/en-us/windows/uwp/debug-test-perf/device-portal#csrf-protection-and-scripting\nusername = `auto-${username}`;\n\nconst base64 = toBase64(`${username}:${password}`);\n\nreturn `Basic ${base64}`;",
        "getDevicePortalUrl": "@const { \n    includeCredentials = false\n} = that ?? {};\n\nconst devicePortal = configBot.tags.hl2dp;\nconst corsProxy = configBot.tags.corsProxy;\n\nif (!devicePortal) {\n    throw new Error(`Need to have HoloLens 2 Device Portal URL in URL query parameter: 'hl2dp'`);\n}\n\nlet url;\n\nif (corsProxy) {\n    url = new URL(corsProxy);\n    url.pathname = devicePortal;\n} else {\n    url = new URL(devicePortal);\n}\n\nif (includeCredentials) {\n    let username = configBot.tags.hl2dpUser;\n    let password = configBot.tags.hl2dpPass;\n\n    if (!username) {\n        throw new Error(`Need to have HoloLens 2 Device Portal Username in URL query parameter: 'hl2dpUser'`);\n    }\n\n    if (!password) {\n        throw new Error(`Need to have HoloLens 2 Device Portal Password in URL query parameter: 'hl2dpPass'`);\n    }\n\n    url.username = username;\n    url.password = password;\n}\n\nreturn url.toString();",
        "hololensDevicePortal": "true",
        "requestTimeout": "5000",
        "retryLimit": "5",
        "retryWaitTime": "2500",
        "sendRequest": "@let {\n    route,\n    method,\n    responseType = 'json',\n    requestTimeout = tags.requestTimeout,\n    data,\n    onProgress,\n} = that ?? {};\n\nassert(route, `[${tags.system}] route is required to send request to api.`);\nassert(method, `[${tags.system}] method is required to send request to api.`);\n\nconst RESPONSE_TYPES = [\n    '',\n    'arraybuffer',\n    'blob',\n    'document',\n    'json',\n    'text'\n];\n\nassert(RESPONSE_TYPES.includes(responseType), `[${tags.system}] ${responseType} is not a valid responseType`)\n\nlet devicePortalUrl = thisBot.getDevicePortalUrl();\n\nif (devicePortalUrl.endsWith('/')) {\n    devicePortalUrl = devicePortalUrl.slice(0, -1); // Remove trailing slash\n}\n\nif (!route.startsWith('/')) {\n    route = '/' + route; // Add leading slash.\n}\n\nconst requestUrl = devicePortalUrl + route;\nconst requestId = uuid();\n\nfunction getContentType(obj) {\n    if (typeof obj === 'string') {\n        try {\n            // If the string can be parsed into a JSON object, return 'application/json'\n            JSON.parse(obj);\n            return 'application/json';\n        } catch(e) {\n            // If the string can't be parsed into a JSON object, return 'text/plain'\n            return 'text/plain';\n        }\n    }\n    else if (obj instanceof FormData) {\n        return 'multipart/form-data';\n    }\n    else if (obj instanceof Blob) {\n        return obj.type || 'application/octet-stream';\n    }\n    else if (obj instanceof ArrayBuffer) {\n        return 'application/octet-stream';\n    }\n    else if (obj instanceof URLSearchParams) {\n        return 'application/x-www-form-urlencoded';\n    } else if (typeof obj === 'object') {\n        try { \n            // Test that the object is valid JSON.\n            JSON.parse(JSON.stringify(obj));\n            return 'application/json';\n        } catch (e) {\n            // Do nothing.\n        }\n    }\n\n    throw new Error('Unsupported object type');\n}\n\nconst contentType = data ? getContentType(data) : null;\n\nconst RETRY_HTTP_CODES = [\n    408, // Request Timeout\n    409, // Conflict\n    423, // Locked\n    425, // Too Early\n    429, // Too Many Requests\n    500, // Internal Server Error\n    502, // Bad Gateway\n    503, // Service Unavailable\n    504, // Gateway Timeout\n];\n\nlet tryCount = 0;\n\nasync function request() {\n    if (tags.debug) {\n        console.log(`[${tags.system}] sendRequest [requestId: ${requestId}]`, { requestUrl, method, data });\n    }\n\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.responseType = responseType;\n        \n        // Setup request timeout.\n        let timeoutId = null;\n\n        function cancelTimeout() {\n            if (timeoutId) {\n                clearTimeout(timeoutId);\n                timeoutId = null;\n            }\n        }\n\n        function startTimeout(time = tags.requestTimeout) {\n            cancelTimeout();\n\n            if (time > 0) {\n                timeoutId = setTimeout(() => {\n                    xhr.abort();\n                }, time);\n            }\n        }\n\n        startTimeout();\n\n        xhr.addEventListener('load', () => {\n            // Cancel timeout when request is complete.\n            cancelTimeout();\n\n            if (xhr.status >= 200 && xhr.status <= 299) {\n                // Success.\n                let result = {\n                    status: xhr.status,\n                    statusText: xhr.statusText,\n                    data: xhr.response,\n                };\n\n                if (tags.debug) {\n                    console.log(`[${tags.system}] sendRequest [requestId: ${requestId}] success`, result);\n                }\n\n                resolve(result);\n            } else {\n                // Error.\n                let result = {\n                    status: xhr.status,\n                    statusText: xhr.statusText,\n                    data: xhr.response,\n                }\n\n                console.error(`[${tags.system}] sendRequest [requestId: ${requestId}] unsuccessful`, result);\n\n                reject(result)\n            }\n        });\n\n        xhr.addEventListener('error', (e) => {\n            cancelTimeout();\n            console.error(`[${tags.system}] sendRequest [requestId: ${requestId}] xhr onerror`, e);\n            reject(e);\n        });\n\n        xhr.addEventListener('abort', (e) => {\n            cancelTimeout();\n            console.error(`[${tags.system}] sendRequest [requestId: ${requestId}] xhr onabort`, e);\n            reject(e);\n        });\n\n        xhr.addEventListener('progress', (e) => {\n            // Restart timeout when progress is event is received.\n            startTimeout();\n\n            if (onProgress) {\n                onProgress(e.loaded / e.total);\n            }\n        });\n\n        let body = null;\n\n        if (data) {\n            body = data;\n        }\n\n        xhr.open(method, requestUrl);\n        xhr.setRequestHeader('Authorization', thisBot.getAuthorizationHeader());\n\n        // HACK\n        // xhr.setRequestHeader('Authority', '192.168.0.106');\n        // xhr.setRequestHeader('Method', 'POST');\n        // xhr.setRequestHeader('Path', '/api/holographic/mrc/photo?holo=true&pv=true&RenderFromCamera=true');\n        // xhr.setRequestHeader('Scheme', 'https');\n        // xhr.setRequestHeader('Accept', '*/*');\n        // xhr.setRequestHeader('Accept-Encoding', 'gzip, deflate, br');\n        // xhr.setRequestHeader('Accept-Language', 'en-US,en;q=0.9,de;q=0.8,es;q=0.7');\n        // xhr.setRequestHeader('Cache-Control', 'no-cache');\n        // xhr.setRequestHeader('Content-Length', 0);\n        // xhr.setRequestHeader('Cookie', 'CSRF-Token=sjaSHrIVga9RHwJ/DMEo5eHrCTEL/Hqr; FileExplorerPackageName=undefined; FileExplorerPath=undefined; FileExplorerKnownFolderId=undefined; CSRF-Token=yRL/MsClRkh8RZhPDWnjV4I0yWU+xGbq');\n        // xhr.setRequestHeader('Origin', 'https://192.168.0.106');\n        // xhr.setRequestHeader('Pragma', 'no-cache');\n        // xhr.setRequestHeader('Referer', 'https://192.168.0.106/');\n        // xhr.setRequestHeader('Sec-Ch-Ua', '\"Not.A/Brand\";v=\"8\", \"Chromium\";v=\"114\", \"Google Chrome\";v=\"114\"');\n        // xhr.setRequestHeader('Sec-Ch-Ua-Mobile', '?0');\n        // xhr.setRequestHeader('Sec-Ch-Ua-Platform', '\"macOS\"');\n        // xhr.setRequestHeader('Sec-Fetch-Dest', 'empty');\n        // xhr.setRequestHeader('Sec-Fetch-Mode', 'cors');\n        // xhr.setRequestHeader('Sec-Fetch-Site', 'same-origin');\n        // xhr.setRequestHeader('X-Csrf-Token', 'yRL/MsClRkh8RZhPDWnjV4I0yWU+xGbq');\n        // xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n\n        if (contentType) {\n            xhr.setRequestHeader('Content-Type', contentType);\n            console.log(`${tags.system}` )\n        }\n\n        xhr.send(body);\n    });\n}\n\nwhile(true) {\n    try {\n        let result = await request();\n\n        if (tryCount > 0) {\n            console.log(`[${tags.system}] sendRequest [requestId: ${requestId}] succeeded after ${tryCount} retry(s).`);\n        }\n\n        return result;\n    } catch (e) {\n        if (tags.debug) {\n            console.error(`[${tags.system}] send request error caught:`, e);\n        }\n\n        let isRetryCode = false;\n\n        if (e.status) {\n            isRetryCode = e.status != null && RETRY_HTTP_CODES.some(code => code === e.status);\n        }\n\n        if (isRetryCode) {\n            if (isRetryCode && tryCount < tags.retryLimit) {\n                console.warn(`[${tags.system}] Unable to send request [requestId: ${requestId}]. Will try again in ${tags.retryWaitTime}ms. (Attempt ${tryCount + 1}/${tags.retryLimit})`, e);\n                tryCount++;\n                await os.sleep(tags.retryWaitTime);\n                continue;\n            } else {\n                throw new Error(`[${tags.system}] Failed to send request [requestId: ${requestId}] after ${tags.retryLimit} attempts.`);\n            }\n        } else {\n            let errorMsg = `[${tags.system}] Failed to send request [requestId: ${requestId}]`;\n            \n            let statusMsg = '';\n\n            if (e.status) {\n                statusMsg += 'status: ' + e.status;\n\n                if (e.statusText) {\n                    statusMsg += ' ' + e.statusText;\n                }\n            } else if (e.statusText) {\n                statusMsg += 'statusText: ' + e.statusText;\n            }\n\n            errorMsg += ' ' + statusMsg;\n\n            throw new Error(errorMsg);\n        }\n\n    }\n}",
        "system": "rc-hololens-device-portal.api",
        "toBase64": "@const input = that;\n\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nvar str = '';\nvar i;\n\nfor (i = 0; i < input.length; i += 3) {\n    var a = input.charCodeAt(i) || 0;\n    var b = input.charCodeAt(i + 1) || 0;\n    var c = input.charCodeAt(i + 2) || 0;\n    var triple = (a << 0x10) + (b << 0x08) + c;\n\n    str += chars.charAt((triple >> 3 * 6) & 0x3F);\n    str += chars.charAt((triple >> 2 * 6) & 0x3F);\n    str += i + 1 < input.length ? chars.charAt((triple >> 1 * 6) & 0x3F) : '=';\n    str += i + 2 < input.length ? chars.charAt((triple >> 0 * 6) & 0x3F) : '=';\n}\n\nreturn str;"
      }
    },
    "rc-hololens-device-portal.testDimension": {
      "id": "rc-hololens-device-portal.testDimension",
      "space": "shared",
      "tags": {
        "clearDimension": "@if (thisBot.vars.buttons) {\n    destroy(thisBot.vars.buttons);\n    delete thisBot.vars.buttons;\n}",
        "dimension": "hl2dp",
        "onDimensionEnter": "@thisBot.setupDimension();",
        "onDimensionExit": "@thisBot.clearDimension();",
        "onEggHatch": "@if (configBot.tags.gridPortal) {\n    thisBot.onPortalChanged({ portal: 'gridPortal', dimension: configBot.tags.gridPortal });\n}",
        "onPortalChanged": "@const { portal, dimension } = that;\n\nif (portal === 'gridPortal') {\n    if (dimension === tags.dimension && !masks.entered) {\n        masks.entered = true;\n        thisBot.onDimensionEnter();\n    } else if (dimension !== tags.dimension && masks.entered) {\n        masks.entered = false;\n        thisBot.onDimensionExit();\n    }\n}",
        "setupDimension": "@const BASE_BUTTON_MOD = {\n    space: 'tempLocal',\n    scaleX: 5.5,\n    scaleY: 3,\n    scaleZ: 0.33,\n    [tags.dimension]: true,\n    draggable: false,\n    cursor: 'pointer',\n    label: 'button',\n    labelFontSize: 2.5,\n    apiBot: getBot('hololensDevicePortal', true).link,\n    dimensionBot: thisBot.link,\n    startEnabled: true,\n    onBotAdded: `@\n        thisBot.setButtonEnabled({ enabled: tags.startEnabled });\n    `,\n    setButtonEnabled: `@\n        const { enabled } = that;\n\n        masks.enabled = enabled;\n\n        if (masks.enabled) {\n            masks.color = null;\n            masks.cursor = null;\n        } else {\n            masks.color = '#888';\n            masks.cursor = 'auto';\n        }\n    `,\n    displayMediaData: `@\n        const { \n            blob,\n            height = 10,\n            aspect = 1.77777777778,\n        } = that;\n\n        let displayBot = getBot('displayMediaDataBot', true);\n\n        if (displayBot) {\n            destroy(displayBot);\n        }\n\n        let mediaUrl = URL.createObjectURL(blob);\n        console.log('mediaUrl', mediaUrl);\n\n        displayBot = create({\n            space: 'tempLocal',\n            form: 'sprite',\n            formAddress: mediaUrl,\n            displayMediaDataBot: true,\n            [links.dimensionBot.tags.dimension]: true,\n            [links.dimensionBot.tags.dimension + 'X']: 0,\n            [links.dimensionBot.tags.dimension + 'Y']: 13,\n            [links.dimensionBot.tags.dimension + 'Z']: 0,\n            scaleX: height * aspect,\n            scaleY: height,\n            draggable: false,\n            pointable: true,\n            onDestroy: \\`@\n                URL.revokeObjectURL(tags.formAddress);\n            \\`,\n        });\n\n        os.focusOn(displayBot, { \n            duration: 0,\n            zoom: 10,\n            rotation: {\n                x: 0,\n                y: 0,\n            }\n        });\n    `,\n    showObject: `@\n        const obj = that;\n        console.log(obj);\n\n        const json = JSON.stringify(obj, null, 2);\n        os.showHtml(\\`\n            <p style=\"white-space: pre; font-family: monospace;\">\\${json}</p>\n        \\`);\n    `,\n    clickColor: '#73D8FF',\n    clickAnimation: `@\n        const fps = await os.getAverageFrameRate();\n        masks.color = tags.clickColor;\n\n        const delay = (60 / fps) * 250;\n        await os.sleep(delay);\n\n        masks.color = null;\n    `,\n    onClick: `@\n        if (masks.enabled) {\n            thisBot.clickAnimation();\n            thisBot.onButtonClick();\n        }\n    `\n};\n\nconst buttons = [];\nthisBot.vars.buttons = buttons;\n\nconst ROW_COUNT = 5;\nconst SPACING_X = 1;\nconst SPACING_Y = 1;\nconst AUTO_LAYOUT_ORIGN_X = -10;\nconst AUTO_LAYOUT_ORIGN_Y = 5;\n\nlet nextAutoLayoutX = AUTO_LAYOUT_ORIGN_X;\nlet nextAutoLayoutY = AUTO_LAYOUT_ORIGN_Y;\nlet workingRowCount = 0;\nlet workingRowHeight = 0;\n\nfunction addButton({\n    autoLayout = true,\n    ...modOverrides\n}) {\n    const mod = { ...BASE_BUTTON_MOD, ...modOverrides };\n\n    if (autoLayout) {\n        // Place button at the next auto layout position.\n        const scaleX = mod.scaleX ?? 1;\n        const scaleY = mod.scaleY ?? 1;\n\n        mod[tags.dimension + 'X'] = nextAutoLayoutX;\n        mod[tags.dimension + 'Y'] = nextAutoLayoutY;\n\n        // Keep track of the height of the current row.\n        if (scaleY > workingRowHeight) {\n            workingRowHeight = scaleY;\n        }\n        \n        workingRowCount++;\n        \n        if (workingRowCount >= ROW_COUNT) {\n            // Move to the next row.\n            nextAutoLayoutY -= workingRowHeight + SPACING_Y;\n            nextAutoLayoutX = AUTO_LAYOUT_ORIGN_X;\n\n            // Reset working row variables.\n            workingRowHeight = 0;\n            workingRowCount = 0;\n        } else {\n            // Move to the next position on the row.\n            nextAutoLayoutX += scaleX + SPACING_X;\n        }\n    }\n\n    buttons.push( create(mod) );\n}\n\naddButton({ \n    label: 'Reset',\n    color: '#F44E3B',\n    onButtonClick:`@\n        links.dimensionBot.clearDimension();\n        links.dimensionBot.setupDimension();\n    `,\n    autoLayout: false,\n    [tags.dimension + 'X']: AUTO_LAYOUT_ORIGN_X - 7,\n    [tags.dimension + 'Y']: AUTO_LAYOUT_ORIGN_Y,\n});\n\naddButton({\n    label: 'os info' + '\\n' + '(GET)',\n    onButtonClick: `@\n        const response = await links.apiBot.sendRequest({\n            route: '/api/os/info',\n            method: 'GET',\n        })\n        thisBot.showObject(response);\n    `\n});\n\n\naddButton({\n    label: 'machinename' + '\\n' + '(GET)',\n    onButtonClick: `@\n        const response = await links.apiBot.sendRequest({\n            route: '/api/os/machinename',\n            method: 'GET',\n        })\n        thisBot.showObject(response);\n    `\n});\n\n// MY DEFAULT MACHIEN NAME IS HOLOLENS-KRC4ML\n\n// addButton({\n//     label: 'machinename' + '\\n' + '(POST) Forbidden',\n//     formOpacity: 0.33,\n//     onButtonClick: `@\n\n//         const name = 'RYANCOOK-HL2';\n//         const nameEncoded = links.apiBot.toBase64(name);\n\n//         const params = new URLSearchParams();\n//         params.set('name', nameEncoded);\n        \n//         const response = await links.apiBot.sendRequest({\n//             route: '/api/os/machinename?' + params.toString(),\n//             method: 'POST',\n//         })\n//         thisBot.showObject(response);\n//     `\n// });\n\naddButton({\n    label: 'ipd' + '\\n' + '(GET)',\n    onButtonClick: `@\n        const response = await links.apiBot.sendRequest({\n            route: '/api/holographic/os/settings/ipd',\n            method: 'GET',\n        })\n        thisBot.showObject(response);\n    `\n});\n\n// MY DEFAULT IPD IS 67246\n\n// addButton({\n//     label: 'ipd' + '\\n' + '(POST) Forbidden',\n//     formOpacity: 0.33,\n//     onButtonClick: `@\n//         // Get current ipd.\n//         let response = await links.apiBot.sendRequest({\n//             route: '/api/holographic/os/settings/ipd',\n//             method: 'GET',\n//         });\n        \n//         const curIpd = response.data.ipd;\n\n//         // Show input for ipd, and allow user to change it.\n//         const input = await os.showInput(curIpd, { title: 'IPD (millimeters)' });\n//         const inputIpd = Number.parseInt(input);\n\n//         if (curIpd !== inputIpd) {\n//             const params = new URLSearchParams();\n//             params.set('ipd', inputIpd);\n\n//             response = await links.apiBot.sendRequest({\n//                 route: '/api/holographic/os/settings/ipd?' + params.toString(),\n//                 method: 'POST',\n//             })\n//             thisBot.showObject(response);\n//         } else {\n//             os.toast('IPD value did not change');\n//         }\n//     `\n// });\n\naddButton({\n    label: 'https' + '\\n' + '(GET)',\n    onButtonClick: `@\n        let response = await links.apiBot.sendRequest({\n            route: '/api/holographic/os/webmanagement/settings/https',\n            method: 'GET',\n        });\n        thisBot.showObject(response);\n    `\n});\n\naddButton({\n    label: 'https' + '\\n' + '(POST)',\n    onButtonClick: `@\n        const possibleValues = ['no', 'yes', 'default'];\n\n        const input = await os.showInput(null, { title: 'HTTPS Required (\"no\", \"yes\", \"default\")' });\n\n        if (!possibleValues.includes(input)) {\n            os.toast(input + ' is not a possible value');\n            return;\n        }\n        \n        const params = new URLSearchParams();\n        params.set('required', input);\n        \n        response = await links.apiBot.sendRequest({\n            route: '/api/holographic/os/webmanagement/settings/https?' + params.toString(),\n            method: 'POST'\n        });\n\n        thisBot.showObject(response);\n    `\n});\n\naddButton({\n    label: 'mrc files list' + '\\n' + '(GET)',\n    onButtonClick: `@\n        let response = await links.apiBot.sendRequest({\n            route: '/api/holographic/mrc/files',\n            method: 'GET',\n        });\n        thisBot.showObject(response);\n    `\n});\n\naddButton({\n    label: 'd/l mrc file' + '\\n' + '(GET)',\n    onButtonClick: `@\n        let response = await links.apiBot.sendRequest({\n            route: '/api/holographic/mrc/files',\n            method: 'GET',\n        });\n\n        // Get files and sort by creation time.\n        let files = response.data.MrcRecordings;\n        files.sort((a, b) => b.CreationTime - a.CreationTime);\n\n        const options = files.map((file, index) => {\n            return {\n                label: file.FileName,\n                value: index\n            }\n        });\n\n        const selectedOption = await os.showInput(null, {\n            title: 'Select File',\n            type: 'list',\n            placeholder: 'File',\n            items: options,\n        });\n\n        console.log('selectedOption:', selectedOption);\n\n        if (selectedOption) {\n            function bytesToMB(bytes) {\n                var megabytes = bytes / (1024 * 1024);\n                return megabytes.toFixed(2) + ' MB';\n            }\n\n            const selectedFile = files[selectedOption.value];\n            const fileSizeMB = bytesToMB(selectedFile.FileSize);\n\n            const downloadFile = await os.showConfirm({\n                title: 'Download File',\n                content: 'Would you like to download ' + selectedFile.FileName + ' (' + fileSizeMB + ')?',\n                confirmText: 'Yes',\n                cancelText: 'No',\n            });\n\n            if (downloadFile) {\n                const params = new URLSearchParams();\n                params.set('filename', links.apiBot.toBase64(selectedFile.FileName));\n\n                let response = await links.apiBot.sendRequest({\n                    route: '/api/holographic/mrc/file?' + params.toString(),\n                    method: 'GET',\n                    responseType: 'blob',\n                    onProgress: (progress) => {\n                        let html = '<h1>Downloading</h1>';\n                        html += '<p>' + selectedFile.FileName + ' (' + fileSizeMB + '): ' + (progress * 100).toFixed(2) + '%' + '</p>';\n\n                        os.showHtml(html);\n                    }\n                });\n\n                const blob = response.data;\n                const arrayBuffer = await blob.arrayBuffer();\n                const mimeType = blob.type;\n\n                os.download(arrayBuffer, selectedFile.FileName, mimeType);\n            }\n        }\n    `\n});\n\naddButton({\n    label: 'view mrc file' + '\\n' + '(GET)',\n    onButtonClick: `@\n        let response = await links.apiBot.sendRequest({\n            route: '/api/holographic/mrc/files',\n            method: 'GET',\n        });\n\n        // Get files and sort by creation time.\n        let files = response.data.MrcRecordings;\n        files.sort((a, b) => b.CreationTime - a.CreationTime);\n\n        const options = files.map((file, index) => {\n            return {\n                label: file.FileName,\n                value: index\n            }\n        });\n\n        const selectedOption = await os.showInput(null, {\n            title: 'Select File',\n            type: 'list',\n            placeholder: 'File',\n            items: options,\n        });\n\n        console.log('selectedOption:', selectedOption);\n\n        if (selectedOption) {\n            const selectedFile = files[selectedOption.value];\n\n            let devicePortalUrl = links.apiBot.getDevicePortalUrl({ includeCredentials: true });\n\n            const params = new URLSearchParams();\n            params.set('filename', links.apiBot.toBase64(selectedFile.FileName));\n            params.set('op', 'stream');\n\n            const requestUrl = devicePortalUrl + '/api/holographic/mrc/file?' + params.toString();\n\n            os.openURL(requestUrl);\n        }\n    `\n});\n\naddButton({\n    label: 'delete all mrc files' + '\\n' + '(DELETE)',\n    onButtonClick: `@\n        let response = await links.apiBot.sendRequest({\n            route: '/api/holographic/mrc/files',\n            method: 'GET',\n        });\n\n        let files = response.data.MrcRecordings;\n\n        const deleteAll = await os.showConfirm({\n            title: 'Delete Files',\n            content: 'Are you sure you want to delete all Mixed Reality Capture files? There are ' + files.length + ' file(s) that will be deleted.',\n            confirmText: 'Delete All',\n            cancelText: 'Cancel',\n        });\n\n        if (deleteAll) {\n            let deleteCount = 0;\n\n            function updateStatusDisplay() {\n                let html = '<h1>Deleting MRC Files</h1>';\n                html += '<p>' + 'Deleted: ' + deleteCount + '/' + files.length + '</p>';\n\n                os.showHtml(html);\n            }\n\n            updateStatusDisplay();\n\n            for (let i = 0; i < files.length; i++) {\n                let params = new URLSearchParams();\n                params.set('filename', links.apiBot.toBase64(files[i].FileName));\n\n                response = await links.apiBot.sendRequest({\n                    route: '/api/holographic/mrc/file?' + params.toString(),\n                    method: 'DELETE',\n                });\n\n                if (response.status === 200) {\n                    deleteCount++;\n                }\n                \n                updateStatusDisplay();\n            }\n        }\n    `\n});\n\naddButton({\n    label: 'capture photo' + '\\n' + '(POST)',\n    onButtonClick: `@\n        let params = new URLSearchParams();\n        params.set('holo', true);\n        params.set('pv', true);\n        params.set('RenderFromCamera', true);\n\n        os.showHtml('<p>Capturing photo...</p>');\n\n        let captureResponse = await links.apiBot.sendRequest({\n            route: '/api/holographic/mrc/photo?' + params.toString(),\n            method: 'POST',\n        });\n        \n        if (captureResponse.status === 200) {\n            const filename = captureResponse.data.PhotoFileName;\n\n            let devicePortalUrl = links.apiBot.getDevicePortalUrl();\n\n            if (devicePortalUrl.endsWith('/')) {\n                devicePortalUrl = devicePortalUrl.slice(0, -1); // Remove trailing slash\n            }\n\n            params = new URLSearchParams();\n            params.set('filename', links.apiBot.toBase64(filename));\n\n            let fileResponse = await links.apiBot.sendRequest({\n                route: '/api/holographic/mrc/file?' + params.toString(),\n                method: 'GET',\n                responseType: 'blob',\n                onProgress: (progress) => {\n                    let html = '<p>' + filename + ': ' + (progress * 100).toFixed(2) + '%' + '</p>';\n                    os.showHtml(html);\n                }\n            });\n\n            const blob = fileResponse.data;\n\n            thisBot.displayMediaData({ blob });\n\n            os.showHtml('<p>Done! You can close this window to view your photo.');\n\n        } else {\n            thisBot.showObject(captureResponse);\n        }\n    `\n});\n\naddButton({\n    label: 'capture video start' + '\\n' + '(POST)',\n    onHL2DPVideoCaptureStarted: `@\n        thisBot.setButtonEnabled({ enabled: false });\n    `,\n    onHL2DPVideoCaptureStopped: `@\n        thisBot.setButtonEnabled({ enabled: true });\n    `,\n    onButtonClick: `@\n        let params = new URLSearchParams();\n        params.set('holo', true);\n        params.set('pv', true);\n        params.set('mic', false);\n        params.set('loopback', false);\n        params.set('RenderFromCamera', true);\n\n        let response = await links.apiBot.sendRequest({\n            route: '/api/holographic/mrc/video/control/start?' + params.toString(),\n            method: 'POST',\n        });\n\n        shout('onHL2DPVideoCaptureStarted');\n\n        os.toast('video capture started');\n    `\n});\n\naddButton({\n    label: 'capture video stop' + '\\n' + '(POST)',\n    startEnabled: false,\n    onHL2DPVideoCaptureStarted: `@\n        thisBot.setButtonEnabled({ enabled: true });\n    `,\n    onHL2DPVideoCaptureStopped: `@\n        thisBot.setButtonEnabled({ enabled: false });\n    `,\n    onButtonClick: `@\n        let captureResponse = await links.apiBot.sendRequest({\n            route: '/api/holographic/mrc/video/control/stop',\n            method: 'POST',\n        });\n        \n        if (captureResponse.status === 200) {\n            const filename = captureResponse.data.VideoFileName;\n\n            let devicePortalUrl = links.apiBot.getDevicePortalUrl();\n\n            if (devicePortalUrl.endsWith('/')) {\n                devicePortalUrl = devicePortalUrl.slice(0, -1); // Remove trailing slash\n            }\n\n            params = new URLSearchParams();\n            params.set('filename', links.apiBot.toBase64(filename));\n\n            let fileResponse = await links.apiBot.sendRequest({\n                route: '/api/holographic/mrc/file?' + params.toString(),\n                method: 'GET',\n                responseType: 'blob',\n                onProgress: (progress) => {\n                    let html = '<p>' + filename + ': ' + (progress * 100).toFixed(2) + '%' + '</p>';\n                    os.showHtml(html);\n                }\n            });\n\n            const blob = fileResponse.data;\n\n            thisBot.displayMediaData({ blob });\n\n            os.showHtml('<p>Done! You can close this window to view your video.');\n        } else {\n            thisBot.showObject(captureResponse);\n        }\n\n        shout('onHL2DPVideoCaptureStopped');\n    `\n});",
        "system": "rc-hololens-device-portal.testDimension"
      }
    },
    "rc-hololens-device-portal._packageInfo": {
      "id": "rc-hololens-device-portal._packageInfo",
      "space": "shared",
      "tags": {
        "system": "rc-hololens-device-portal._packageInfo",
        "version": "0.2",
        "versionDate": "📅2023-07-10T13:44:14.758-04:00 local"
      }
    }
  }
}