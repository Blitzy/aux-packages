{
  "version": 1,
  "state": {
    "rc-htmlJoystick.utils.listenerProxy": {
      "id": "rc-htmlJoystick.utils.listenerProxy",
      "space": "shared",
      "tags": {
        "listening": "true",
        "onAnyListen": "@if (!thisBot.vars.listeners) {\n    return; // This bot has not initialized yet.\n}\n\nconst { \n    name,\n    that: thatParam,\n    targets\n} = that;\n\nconst entries = thisBot.vars.listeners[name];\n\nif (entries && entries.length) {\n    for (let i = 0; i < entries.length; i++) {\n        const entry = entries[i];\n        \n        let invoke = true;\n\n        if (entry.bot) {\n            // Only invoke listener if the bot is one of the targets.\n            let entryBotId = typeof entry.bot === 'string' ? entry.bot : entry.bot.id;\n            invoke = targets && targets.some(t => t.id === entryBotId);\n        }\n\n        if (invoke) {\n            entry.listener(thatParam);\n        }\n    }\n}",
        "onBotAdded": "@function addListenTagListener (bot, name, listener) {\n    assert(name, `${tags.system} name is required.`);\n    assert(listener && typeof listener === 'function', `${tags.system} listener function is required.`);\n    \n    let entries = thisBot.vars.listeners[name];\n    if (!entries) {\n        entries = [];\n        thisBot.vars.listeners[name] = entries;\n    }\n\n    entries.push({ listener, bot });\n}\n\nfunction removeListenTagListener (bot, name, listener) {\n    let entries = thisBot.vars.listeners[name];\n    if (!entries) {\n        return;\n    }\n\n    for (let i = entries.length - 1; i >= 0; i--) {\n        let entry = entries[i];\n\n        if (entry.listener != listener) {\n            continue;\n        }\n\n        if (bot) {\n            const botId = typeof bot === 'string' ? bot : bot.id;\n            const entryBotId = typeof entry.bot === 'string' ? entry.bot : entry.bot.id;\n            \n            if (botId !== entryBotId) {\n                continue;\n            }\n        }\n\n        entries.splice(i, 1);\n    }\n}\n\nglobalThis.addListenTagListener = addListenTagListener;\nglobalThis.removeListenTagListener = removeListenTagListener;\n\nthisBot.vars.listeners = {};",
        "onDestroy": "@globalThis.addListenTagListener = undefined;\nglobalThis.removeListenTagListener = undefined;",
        "system": "rc-htmlJoystick.utils.listenerProxy"
      }
    },
    "rc-htmlJoystick.app": {
      "id": "rc-htmlJoystick.app",
      "space": "shared",
      "tags": {
        "App": "@const { useState, useEffect, useCallback, useRef } = os.appHooks;\n\nconst clamp = (value, min, max) => {\n    return Math.max(min, Math.min(max, value));\n}\n\nconst prettyFloat = (n, decimalPlaces = 2) => {\n\tif (Number.isInteger(n)) {\n\t\treturn n;\n\t} else {\n\t\tconst fixed = n.toFixed(decimalPlaces);\n\t\treturn parseFloat(fixed);\n\t}\n}\n\nconst calculatePosition = (center, direction, distance) => {\n    const directionLength = Math.sqrt(direction.x * direction.x + direction.y * direction.y);\n\n    const normalizedDirection = {\n        x: direction.x / directionLength,\n        y: direction.y / directionLength\n    };\n\n    const newPosition = {\n        x: center.x + normalizedDirection.x * distance,\n        y: center.y + normalizedDirection.y * distance\n    };\n\n    return newPosition;\n}\n\n\nconst Joystick = ({\n    diameter = 100,\n    color,\n    onMove,\n}) => {\n    const joystick = useRef(null);\n    const isMouseDown = useRef(false);\n    const [ position, setPosition ] = useState(new Vector2(0, 0));\n    const [ dragging, setDragging ] = useState(false);\n    const [ startMousePos, setStartMousePos ] = useState();\n\n    useEffect(() => {\n        if (onMove) {\n            onMove(position)\n        }\n    }, [position]);\n\n    const onJoystickBegin = useCallback((e) => {\n        if (!dragging) {\n            setDragging(true);\n            isMouseDown.current = true;\n            setStartMousePos(new Vector2(e.clientX, e.clientY));\n        }\n    }, [setDragging, setStartMousePos]);\n\n    const onJoystickMove = useCallback((e) => {\n        if (dragging && isMouseDown.current) {\n            const mousePos = new Vector2(e.clientX, e.clientY);\n            const direction = mousePos.subtract(startMousePos);\n            const distance = direction.length();\n\n            const position = calculatePosition(new Vector2(0, 0), direction, clamp(distance, 0, diameter / 2));\n            setPosition(position);\n        }\n    }, [dragging, setPosition, startMousePos]);\n\n    const onJoystickEnd = useCallback((e) => {\n        if (dragging) {\n            setDragging(false);\n            isMouseDown.current = false;\n            setPosition(new Vector2(0, 0));\n        }\n    }, [dragging, setDragging]);\n\n    useEffect(() => {\n        if (joystick.current) {\n            if (dragging) {\n                joystick.current.ownerDocument.addEventListener('mousemove', onJoystickMove);\n                joystick.current.ownerDocument.addEventListener('mouseup', onJoystickEnd);\n\n                return () => {\n                    if (joystick.current) {\n                        joystick.current.ownerDocument.removeEventListener('mousemove', onJoystickMove);\n                        joystick.current.ownerDocument.removeEventListener('mouseup', onJoystickEnd);\n                    }\n                }\n            }\n        }\n    }, [dragging, setDragging, onJoystickEnd])\n\n    return (\n        <div \n            className='joystick-socket center'\n            style={{\n                width: `${diameter}px`,\n                height: `${diameter}px`\n            }}\n        >\n            <div \n                className='joystick'\n                ref={joystick}\n                onMouseDown={onJoystickBegin}\n                style={{\n                    backgroundColor: color,\n                    transform: `translate(${position.x}px, ${position.y}px)`\n                }}\n            ></div>\n        </div>\n    )\n}\n\nconst App = () => {\n    const [ position, setPosition ] = useState(new Vector2(0, 0));\n\n    const onJoystickMove = useCallback((p) => {\n        setPosition(p);\n    }, [setPosition]);\n\n    return (\n        <>\n            <style>{tags['style.css']}</style>\n            <div className='app'>\n                <p className='no-select'>X: {prettyFloat(position.x, 2)} Y: {prettyFloat(position.y, 2)}</p>\n                <div className='joystick-container center'>\n                    <Joystick onMove={onJoystickMove}></Joystick>\n                </div>\n            </div>\n        </>\n    )\n}\n\nreturn App;",
        "appId": "app",
        "forceUpdate": "@const App = thisBot.vars.appInstance;\n\nif (App) {\n    os.compileApp(tags.appId, <App/>);\n}",
        "home": true,
        "homeX": 0,
        "homeY": -1,
        "homeZ": 0,
        "label": "mount app",
        "mount": "@if (!thisBot.vars.appInstance) {\n    thisBot.vars.appInstance = thisBot.App();\n    await os.registerApp(tags.appId, thisBot);\n}\n\nthisBot.forceUpdate();",
        "onClick": "@await thisBot.unmount();\nthisBot.mount();",
        "scaleX": "4",
        "scaleY": "2",
        "style.css": ".app {\n    background-color: white;\n    width: 300px;\n    height: 400px;\n    padding: 8px;\n}\n\n.joystick-container {\n    margin-top: 16px;\n}\n\n.joystick-socket {\n    background-color: grey;\n    border-radius: 50%;\n    width: 100px;\n    height: 100px;\n}\n\n.joystick {\n    border-radius: 50%;\n    background-color: red;\n    width: 80%;\n    height: 80%;\n    border-style: solid;\n    border-color: rgba(255, 255, 255, 0.33);\n}\n\n.center {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.no-select {\n    user-select: none;\n}",
        "system": "rc-htmlJoystick.app",
        "unmount": "@if (thisBot.vars.appInstance) {\n    thisBot.vars.appInstance = undefined;\n    await os.unregisterApp(tags.appId);\n}"
      }
    }
  }
}