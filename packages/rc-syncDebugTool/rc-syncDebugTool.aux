{
  "version": 1,
  "state": {
    "rc-syncDebugTool.app": {
      "id": "rc-syncDebugTool.app",
      "space": "shared",
      "tags": {
        "App": "@const { useState, useEffect, useCallback } = os.appHooks;\n\nconst App = () => {\n    const [connected, setConnected] = useState(configBot.tags.instStreaming);\n    const [disconnectCount, setDisconnectCount] = useState(0);\n    const [visible, setVisible] = useState(true);\n    const [downloadingUpdates, setDownloadingUpdates] = useState(false);\n\n    const onInstStreaming = useCallback(() => {\n        console.log(`[${tags.system}] app onInstStreaming`);\n        setConnected(true);\n    }, []);\n\n    const onInstStreamLost = useCallback(() => {\n        console.log(`[${tags.system} app onInstStreamLost`);\n        setConnected(false);\n        setDisconnectCount(count => count + 1);\n    }, []);\n\n    const onToggle = useCallback(() => {\n        setVisible(val => !val);\n    }, []);\n\n\n    const onDownloadInstUpdates = useCallback(async () => {\n        try {\n            setDownloadingUpdates(true);\n            \n            const currentUpdate = await os.getCurrentInstUpdate();\n            const updatesList = await os.listInstUpdates();\n            const inst = configBot.tags.inst;\n            const sessionId = configBot.id;\n            const version = os.version();\n\n            os.download(JSON.stringify({\n                currentUpdate,\n                updatesList,\n                sessionId,\n                version\n            }, undefined, 2), `${inst}_${sessionId}_updates.log.json`);\n        } finally {\n            setDownloadingUpdates(false);\n        }\n    }, [])\n\n    useEffect(() => {\n        // Listen for some CasualOS events.\n        RCSyncDebugTool.addListenTagListener(null, 'onInstStreaming', onInstStreaming);\n        RCSyncDebugTool.addListenTagListener(null, 'onInstStreamLost', onInstStreamLost);\n\n        return () => {\n            RCSyncDebugTool.removeListenTagListener(null, 'onInstStreaming', onInstStreaming);\n            RCSyncDebugTool.removeListenTagListener(null, 'onInstStreamLost', onInstStreamLost);\n        }\n    }, [onInstStreaming, onInstStreamLost]);\n\n    let buttonLabel = downloadingUpdates ? 'Please wait...' : 'Download Updates';\n    \n    return (\n        <>\n            <style>{tags['style.css']}</style>\n            <div className='sync-debug-tool-app'>\n                <button className='toggle-button' onClick={onToggle}>{visible ? 'â–¼â–¼â–¼' : 'â–²â–²â–²'}</button>\n\n                {visible &&\n                    <div className='content'>\n                        <div className={'connection-badge ' + (connected ? 'connected' : 'disconnected')}>\n                            {connected ? 'Connected' : 'Disconnected'}\n                        </div>\n                        <div className='statistics'>\n                            <div>\n                                Disconnects: {disconnectCount}\n                            </div>\n                        </div>\n                        <button className='download-updates' disabled={downloadingUpdates} onClick={onDownloadInstUpdates}>{buttonLabel}</button>\n                    </div>\n                }\n            </div>\n        </>\n    )\n}\n\nreturn App;\n",
        "forceUpdate": "@const App = thisBot.vars.appInstance;\n\nif (App) {\n    os.compileApp(tags.system, <App/>)\n}\n",
        "mount": "@if (!thisBot.vars.appInstance) {\n    thisBot.vars.appInstance = await thisBot.App();\n    await os.registerApp(tags.system, thisBot);\n\n    thisBot.forceUpdate();\n}\n",
        "onDestroy": "@thisBot.unmount();",
        "onInitialize": "@thisBot.mount();",
        "style.css": ".sync-debug-tool-app {\n    position: fixed;\n    right: 0;\n    bottom: 0;\n    z-index: 100;\n    background-color: white;\n    box-shadow: 2px 4px 5px;\n    border-radius: 4px 0 0 0;\n}\n\n.toggle-button {\n    height: 10px;\n    display: flex;\n    font-size: 0.6em;\n    min-width: 164px;\n    width: 100%;\n    cursor: pointer;\n    align-items: center;\n    justify-content: center;\n}\n\n.content {\n    padding: 12px;\n}\n\n.connection-badge {\n    width: 100%;\n    height: 30px;\n    border-radius: 4px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    text-transform: uppercase;\n    color: rgba(0,0,0,0.6);\n}\n\n.connection-badge.connected {\n    background-color: rgb(73 255 92);\n}\n\n.connection-badge.disconnected {\n    background-color: rgb(255, 47, 0);\n}\n\n.statistics {\n    margin-top: 4px;\n    margin-bottom: 4px;\n}\n\n.statistics div {\n    opacity: 0.8;\n}\n\n.download-updates {\n    margin-top: 4px;\n    min-width: 140px;\n    width: 100%;\n    cursor: pointer;\n}\n",
        "system": "rc-syncDebugTool.app",
        "unmount": "@if (thisBot.vars.appInstance) {\n    delete thisBot.vars.appInstance;\n\n    // Compiling the app with an empty root value is a workaround that allows the\n    // previous components to perform their unmounting code properly.\n    await os.compileApp(tags.system, <></>);\n\n    await os.unregisterApp(tags.system);\n}\n"
      }
    },
    "rc-syncDebugTool.init": {
      "id": "rc-syncDebugTool.init",
      "space": "shared",
      "tags": {
        "initialize": "@if (masks.initialized) {\n    return;\n}\n\nmasks.initialized = true;\nshout('onInitialize');",
        "onEggHatch": "@thisBot.initialize();",
        "onInstJoined": "@thisBot.initialize();",
        "system": "rc-syncDebugTool.init"
      }
    },
    "rc-syncDebugTool.watchConnection": {
      "id": "rc-syncDebugTool.watchConnection",
      "space": "shared",
      "tags": {
        "onInitialize": "@thisBot.onInstStreaming();",
        "onInstStreamLost": "@console.log(`[${tags.system}] onInstStreamLost`);\nconfigBot.tags.instStreaming = false;",
        "onInstStreaming": "@console.log(`[${tags.system}] onInstStreaming`);\nconfigBot.tags.instStreaming = true;",
        "system": "rc-syncDebugTool.watchConnection"
      }
    },
    "rc-syncDebugTool.listenerProxy": {
      "id": "rc-syncDebugTool.listenerProxy",
      "space": "shared",
      "tags": {
        "listening": "true",
        "onAnyListen": "@if (!thisBot.vars.listeners) {\n    return; // This bot has not initialized yet.\n}\n\nconst { \n    name,\n    that: thatParam,\n    targets\n} = that;\n\nconst entries = thisBot.vars.listeners[name];\n\nif (entries && entries.length) {\n    for (let i = 0; i < entries.length; i++) {\n        const entry = entries[i];\n        \n        let invoke = true;\n\n        if (entry.bot) {\n            // Only invoke listener if the bot is one of the targets.\n            let entryBotId = typeof entry.bot === 'string' ? entry.bot : entry.bot.id;\n            invoke = targets && targets.some(t => t.id === entryBotId);\n        }\n\n        if (invoke) {\n            entry.listener(thatParam);\n        }\n    }\n}",
        "onBotAdded": "@function addListenTagListener (bot, name, listener) {\n    assert(name, `${tags.system} name is required.`);\n    assert(listener && typeof listener === 'function', `${tags.system} listener function is required.`);\n    \n    let entries = thisBot.vars.listeners[name];\n    if (!entries) {\n        entries = [];\n        thisBot.vars.listeners[name] = entries;\n    }\n\n    entries.push({ listener, bot });\n}\n\nfunction removeListenTagListener (bot, name, listener) {\n    let entries = thisBot.vars.listeners[name];\n    if (!entries) {\n        return;\n    }\n\n    for (let i = entries.length - 1; i >= 0; i--) {\n        let entry = entries[i];\n\n        if (entry.listener != listener) {\n            continue;\n        }\n\n        if (bot) {\n            const botId = typeof bot === 'string' ? bot : bot.id;\n            const entryBotId = typeof entry.bot === 'string' ? entry.bot : entry.bot.id;\n            \n            if (botId !== entryBotId) {\n                continue;\n            }\n        }\n\n        entries.splice(i, 1);\n    }\n}\n\nglobalThis.RCSyncDebugTool = {\n    addListenTagListener,\n    removeListenTagListener\n}\n\nthisBot.vars.listeners = {};",
        "onDestroy": "@globalThis.RCSyncDebugTool = undefined;",
        "system": "rc-syncDebugTool.listenerProxy"
      }
    },
    "rc-syncDebugTool._packageInfo": {
      "id": "rc-syncDebugTool._packageInfo",
      "space": "shared",
      "tags": {
        "system": "rc-syncDebugTool._packageInfo",
        "version": "1.4",
        "versionDate": "ðŸ“…2023-11-10T10:07:15.620-05:00 local"
      }
    }
  }
}