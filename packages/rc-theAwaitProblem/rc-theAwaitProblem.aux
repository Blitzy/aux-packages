{
  "version": 1,
  "state": {
    "rc-theAwaitProblem.awaitStringEmbed": {
      "id": "rc-theAwaitProblem.awaitStringEmbed",
      "space": "shared",
      "tags": {
        "color": "#00D9CD",
        "cursor": "pointer",
        "home": true,
        "homeX": 0,
        "homeY": 1,
        "homeZ": 0,
        "label": "await string embed",
        "onClick": "@const result = thisBot.testFunction();\n\nif (result instanceof Promise) {\n    os.tip('is a promise function');\n} else {\n    os.tip('is a normal function')\n}",
        "scaleX": "2",
        "system": "rc-theAwaitProblem.awaitStringEmbed",
        "testFunction": "@const funcString = `\n    let x = 2;\n    let y = 2;\n\n    await os.sleep(1000);\n\n    os.toast(x+y);\n`\n\nos.run(funcString);"
      }
    },
    "rc-theAwaitProblem.awaitRootComment": {
      "id": "rc-theAwaitProblem.awaitRootComment",
      "space": "shared",
      "tags": {
        "color": "#00D9CD",
        "cursor": "pointer",
        "home": true,
        "homeX": 3,
        "homeY": 3,
        "homeZ": 0,
        "label": "await root comment",
        "onClick": "@const result = thisBot.testFunction();\n\nif (result instanceof Promise) {\n    os.tip('is a promise function');\n} else {\n    os.tip('is a normal function')\n}",
        "scaleX": "2",
        "system": "rc-theAwaitProblem.awaitRootComment",
        "testFunction": "@let x = 2;\nlet y = 2;\n\n// await os.sleep(1000);\n\n/*\nawait os.sleep(1000);\n*/\n\nos.toast(x+y);"
      }
    },
    "rc-theAwaitProblem.awaitStringEmbedComment": {
      "id": "rc-theAwaitProblem.awaitStringEmbedComment",
      "space": "shared",
      "tags": {
        "color": "#00D9CD",
        "cursor": "pointer",
        "home": true,
        "homeX": 3,
        "homeY": 1,
        "homeZ": 0,
        "label": "await string embed comment",
        "onClick": "@const result = thisBot.testFunction();\n\nif (result instanceof Promise) {\n    os.tip('is a promise function');\n} else {\n    os.tip('is a normal function')\n}",
        "scaleX": "2",
        "system": "rc-theAwaitProblem.awaitStringEmbedComment",
        "testFunction": "@const funcString = `\n    let x = 2;\n    let y = 2;\n\n    //await os.sleep(1000);\n\n    /*\n    await os.sleep(1000);\n    */\n\n    os.toast(x+y);\n`\n\nos.run(funcString);"
      }
    },
    "rc-theAwaitProblem.thenable": {
      "id": "rc-theAwaitProblem.thenable",
      "space": "shared",
      "tags": {
        "color": "#00D9CD",
        "cursor": "pointer",
        "home": true,
        "homeX": 0,
        "homeY": -5,
        "homeZ": 0.009000000000000001,
        "label": "thenable",
        "onClick": "@const result = thisBot.testFunction();\n\nif (result instanceof Promise) {\n    os.tip('is a promise function');\n} else {\n    os.tip('is a normal function')\n}",
        "scaleX": "2",
        "system": "rc-theAwaitProblem.thenable",
        "testFunction": "@let x = 2;\nlet y = 2;\n\nos.sleep(1000).then(() => {\n    os.toast(x+y);\n})\n"
      }
    },
    "rc-theAwaitProblem.awaitInEnglishComment": {
      "id": "rc-theAwaitProblem.awaitInEnglishComment",
      "space": "shared",
      "tags": {
        "color": "#00D9CD",
        "cursor": "pointer",
        "home": true,
        "homeX": 0,
        "homeY": -3,
        "label": "\"await\" in english comment",
        "onClick": "@const result = thisBot.testFunction();\n\nif (result instanceof Promise) {\n    os.tip('is a promise function');\n} else {\n    os.tip('is a normal function')\n}",
        "scaleX": "2",
        "system": "rc-theAwaitProblem.awaitInEnglishComment",
        "testFunction": "@// Ahoy, me hearties! Stand fast and await the signal; treasure and glory lie just under the horizon!\nlet x = 2;\nlet y = 2;\n\nos.toast(x+y);"
      }
    },
    "rc-theAwaitProblem.awaitNested": {
      "id": "rc-theAwaitProblem.awaitNested",
      "space": "shared",
      "tags": {
        "color": "#00D9CD",
        "cursor": "pointer",
        "home": true,
        "homeX": 0,
        "homeY": -1,
        "label": "await nested",
        "onClick": "@const result = thisBot.testFunction();\n\nif (result instanceof Promise) {\n    os.tip('is a promise function');\n} else {\n    os.tip('is a normal function')\n}",
        "scaleX": "2",
        "system": "rc-theAwaitProblem.awaitNested",
        "testFunction": "@async function test() {\n    let x = 2;\n    let y = 2;\n\n    await os.sleep(1000);\n\n    os.toast(x+y);\n}\n\ntest();"
      }
    },
    "rc-theAwaitProblem.awaitNestedComment": {
      "id": "rc-theAwaitProblem.awaitNestedComment",
      "space": "shared",
      "tags": {
        "color": "#00D9CD",
        "cursor": "pointer",
        "home": true,
        "homeX": 3,
        "homeY": -1,
        "label": "await nested comment",
        "onClick": "@const result = thisBot.testFunction();\n\nif (result instanceof Promise) {\n    os.tip('is a promise function');\n} else {\n    os.tip('is a normal function')\n}",
        "scaleX": "2",
        "system": "rc-theAwaitProblem.awaitNestedComment",
        "testFunction": "@async function test() {\n    let x = 2;\n    let y = 2;\n\n    // await os.sleep(1000);\n    /* await os.sleep(1000); */\n\n    os.toast(x+y);\n}\n\ntest();"
      }
    },
    "rc-theAwaitProblem.awaitRoot": {
      "id": "rc-theAwaitProblem.awaitRoot",
      "space": "shared",
      "tags": {
        "color": "#00D9CD",
        "cursor": "pointer",
        "home": true,
        "homeX": 0,
        "homeY": 3,
        "label": "await root",
        "onClick": "@const result = thisBot.testFunction();\n\nif (result instanceof Promise) {\n    os.tip('is a promise function');\n} else {\n    os.tip('is a normal function')\n}",
        "scaleX": "2",
        "system": "rc-theAwaitProblem.awaitRoot",
        "testFunction": "@let x = 2;\nlet y = 2;\n\nawait os.sleep(1000);\n\nos.toast(x+y);"
      }
    },
    "rc-theAwaitProblem._packageInfo": {
      "id": "rc-theAwaitProblem._packageInfo",
      "space": "shared",
      "tags": {
        "system": "rc-theAwaitProblem._packageInfo",
        "version": "1.3",
        "versionDate": "ðŸ“…2024-03-13T09:48:59.709-04:00 local"
      }
    }
  }
}