{
  "version": 1,
  "state": {
    "rc-threejs-basic._packageInfo": {
      "id": "rc-threejs-basic._packageInfo",
      "space": "shared",
      "tags": {
        "system": "rc-threejs-basic._packageInfo",
        "version": "1.3",
        "versionDate": "ðŸ“…2024-06-17T16:18:22.671-04:00 local"
      }
    },
    "rc-threejs-basic.canvas": {
      "id": "rc-threejs-basic.canvas",
      "space": "shared",
      "tags": {
        "App": "@const { useState, useCallback, useEffect } = os.appHooks;\n\nconst App = () => {\n    const [ canvas, setCanvas ] = useState();\n    const [ offscreenCanvas, setOffscreenCanvas] = useState();\n\n    // Transfer control of the canvas to an offscreen canvas.\n    useEffect(() => {\n        if (canvas && !offscreenCanvas) {\n\n            if (tags.debug) {\n                console.log(`[${tags.system}] canvas:`, canvas);\n            }\n            \n            // Need to wait a couple frames otherwise we'll get the following error:\n            // [HtmlApp] Unable to call .transferControlToOffscreen() on nonexistant node!\n            self.requestAnimationFrame(() => {\n                self.requestAnimationFrame(() => {\n                    self.requestAnimationFrame(() => {\n                        canvas.transferControlToOffscreen().then((offscreenCanvas) => {\n                            setOffscreenCanvas(offscreenCanvas);\n\n                            shout('onCanvasReady', { canvas: offscreenCanvas })\n                        })\n                    })\n                })\n            })\n        }\n    }, [canvas, offscreenCanvas])\n\n    // Shout onCanvasDestroy if the canvas gets unmounted.\n    useEffect(() => {\n        if (offscreenCanvas) {\n            return () => {\n                shout('onCanvasDestroy');\n            }\n        }\n    }, [offscreenCanvas])\n\n    const onWindowResize = useCallback(() => {\n        const width = gridPortalBot.tags.pixelWidth;\n        const height = gridPortalBot.tags.pixelHeight;\n\n        if (tags.debug) {\n            console.log(`[${tags.system}] window resize`, { width, height });\n        }\n\n        shout('onCanvasResize', { width, height });\n    }, []);\n\n    // Setup window resize event handler.\n    useEffect(() => {\n        function onGridPortalBotChanged (listenerThat) {\n            const windowSizeChanged = listenerThat.tags.some((tag) => {\n                return tag === 'pixelWidth' ||\n                       tag === 'pixelHeight'\n            })\n\n            if (windowSizeChanged) {\n                onWindowResize();\n            }\n        }\n\n        addListenTagListener(gridPortalBot, 'onBotChanged', onGridPortalBotChanged);\n\n        return () => {\n            removeListenTagListener(gridPortalBot, 'onBotChanged', onGridPortalBotChanged);\n        }\n    }, [onWindowResize])\n\n    const onCloseClick = useCallback(() => {\n        thisBot.unmount();\n    }, [])\n\n    return (\n        <>\n            <canvas\n                ref={canvas => setCanvas(canvas)}\n                style={{\n                    position: 'fixed',\n                    top: 0,\n                    left: 0,\n                }}\n            ></canvas>\n            <button \n                onClick={onCloseClick}\n                style= {{\n                    position: 'fixed',\n                    top: 0,\n                    right: 0,\n                    padding: '6px 16px',\n                    margin: '10px',\n                }}\n            >Close</button>\n        </>\n    )\n}\n\nreturn App;\n",
        "debug": "true",
        "mount": "@if (!thisBot.vars.appInstance) {\n    thisBot.vars.appInstance = thisBot.App();\n    await os.registerApp(tags.system, thisBot);\n\n    const App = thisBot.vars.appInstance;\n    if (App) {\n        os.compileApp(tags.system, <App/>)\n    }\n\n}\n",
        "onDestroy": "@thisBot.unmount();",
        "onEnableThreeJSApp": "@thisBot.mount();",
        "system": "rc-threejs-basic.canvas",
        "unmount": "@if (thisBot.vars.appInstance) {\n    delete thisBot.vars.appInstance;\n    await os.unregisterApp(tags.system);\n}\n"
      }
    },
    "rc-threejs-basic.enableButton": {
      "id": "rc-threejs-basic.enableButton",
      "space": "shared",
      "tags": {
        "cursor": "pointer",
        "debug": "true",
        "home": true,
        "homeX": 0,
        "homeY": "0",
        "label": "enable three.js app",
        "onClick": "@shout('onEnableThreeJSApp');",
        "scaleX": "5",
        "scaleY": "2",
        "scaleZ": "0.3",
        "style.css": ".three-app {\n    background-color: white;\n    padding: 12px;\n}\n\n.three-app canvas {\n    position: fixed;\n    top: 0;\n    left: 0;\n}\n\n.three-app .close {\n    position: fixed;\n    top: 0;\n    right: 0;\n    padding: 6px 16px;\n    margin: 10px;\n}\n\n.three-app .pause {\n    position: fixed;\n    top: 0;\n    left: 0;\n    padding: 6px 16px;\n    margin: 10px;\n}\n",
        "system": "rc-threejs-basic.enableButton"
      }
    },
    "rc-threejs-basic.threeApp": {
      "id": "rc-threejs-basic.threeApp",
      "space": "shared",
      "tags": {
        "debug": "true",
        "onCanvasDestroy": "@const threeApp = globalThis.threeApp;\n\nif (threeApp) {\n    const { renderer } = threeApp;\n\n    if (tags.debug) {\n        console.log(`[${tags.system}] cleanup three renderer`)\n    }\n\n    // Free up resources related to WebGL when this app becomes unmounted.\n    renderer.dispose();\n}",
        "onCanvasReady": "@import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.162.0/+esm';\n\nconst { canvas } = that;\n\nif (tags.debug) {\n    console.log(`[${tags.system}] initialize`, that);\n}\n\nconst width = gridPortalBot.tags.pixelWidth;\nconst height = gridPortalBot.tags.pixelHeight;\nconst aspect = width / height;\n\n// Setup three.js WebGL renderer\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas,\n    antialias: true,\n});\n// Set width and height of renderer but do not updateStyle as it \n// will fail due to there not being a true HTMLCanvasElement behind this.\nrenderer.setSize(width, height, false);\n\n// Setup three.js scene.\nconst scene = new THREE.Scene();\nscene.background = new THREE.Color('rgb(0, 4, 10)');\n\n// Create and add a green box.\nconst boxGeo = new THREE.BoxGeometry(1, 1, 1);\nconst boxMat = new THREE.MeshStandardMaterial({\n    color: new THREE.Color('rgb(0, 255, 255)')\n})\nconst boxMesh = new THREE.Mesh(boxGeo, boxMat);\nboxMesh.name = 'my-green-box';\nscene.add(boxMesh);\n\n// Create and add a perspective camera.\nconst camera = new THREE.PerspectiveCamera(75, aspect, 0.1, 2000);\nscene.add(camera);\n// Move camera back so that the box is in view of the camera.\ncamera.position.z = 5;\n\n// Create and add a directional light.\nconst dirLight = new THREE.DirectionalLight(0xfffffff, 1.5);\nscene.add(dirLight);\n\n// Create and add a hemisphere light.\nconst hemiLight = new THREE.HemisphereLight(0xffffbb, 0x080820, 0.5);\nscene.add(hemiLight);\n\n// Setup update loop.\nrenderer.setAnimationLoop(() => {\n    whisper(thisBot, 'update');\n})\n\n// Store references to important three.js objects in the threeApp global variable.\nglobalThis.threeApp = {\n    renderer,\n    scene,\n    camera,\n}",
        "onCanvasResize": "@const { width, height } = that;\n\nif (tags.debug) {\n    console.log(`[${tags.system}] resize renderer and camera`, that);\n}\n\nconst threeApp = globalThis.threeApp;\n\nif (threeApp) {\n    const { renderer, camera } = threeApp;\n    \n    const width = gridPortalBot.tags.pixelWidth;\n    const height = gridPortalBot.tags.pixelHeight;\n    const aspect = width / height;\n\n    if (renderer) {\n        renderer.setSize(width, height, false);\n    }\n\n    if (camera) {\n        camera.aspect = aspect;\n        camera.updateProjectionMatrix();\n    }\n}",
        "system": "rc-threejs-basic.threeApp",
        "update": "@const threeApp = globalThis.threeApp;\n\nif (threeApp) {\n    const { renderer, camera, scene } = threeApp;\n\n    const boxMesh = scene.getObjectByName('my-green-box');\n    boxMesh.rotation.x += 0.02;\n    boxMesh.rotation.y += 0.02;\n\n    renderer.render(scene, camera);\n}"
      }
    },
    "rc-threejs-basic.utils.listenerProxy": {
      "id": "rc-threejs-basic.utils.listenerProxy",
      "space": "shared",
      "tags": {
        "listening": "true",
        "onAnyListen": "@if (!thisBot.vars.listeners) {\n    return; // This bot has not initialized yet.\n}\n\nconst { \n    name,\n    that: thatParam,\n    targets\n} = that;\n\nconst entries = thisBot.vars.listeners[name];\n\nif (entries && entries.length) {\n    for (let i = 0; i < entries.length; i++) {\n        const entry = entries[i];\n        \n        let invoke = true;\n\n        if (entry.bot) {\n            // Only invoke listener if the bot is one of the targets.\n            let entryBotId = typeof entry.bot === 'string' ? entry.bot : entry.bot.id;\n            invoke = targets && targets.some(t => t.id === entryBotId);\n        }\n\n        if (invoke) {\n            entry.listener(thatParam);\n        }\n    }\n}",
        "onBotAdded": "@function addListenTagListener (bot, name, listener) {\n    assert(name, `${tags.system} name is required.`);\n    assert(listener && typeof listener === 'function', `${tags.system} listener function is required.`);\n    \n    let entries = thisBot.vars.listeners[name];\n    if (!entries) {\n        entries = [];\n        thisBot.vars.listeners[name] = entries;\n    }\n\n    entries.push({ listener, bot });\n}\n\nfunction removeListenTagListener (bot, name, listener) {\n    let entries = thisBot.vars.listeners[name];\n    if (!entries) {\n        return;\n    }\n\n    for (let i = entries.length - 1; i >= 0; i--) {\n        let entry = entries[i];\n\n        if (entry.listener != listener) {\n            continue;\n        }\n\n        if (bot) {\n            const botId = typeof bot === 'string' ? bot : bot.id;\n            const entryBotId = typeof entry.bot === 'string' ? entry.bot : entry.bot.id;\n            \n            if (botId !== entryBotId) {\n                continue;\n            }\n        }\n\n        entries.splice(i, 1);\n    }\n}\n\nglobalThis.addListenTagListener = addListenTagListener;\nglobalThis.removeListenTagListener = removeListenTagListener;\n\nthisBot.vars.listeners = {};",
        "onDestroy": "@globalThis.addListenTagListener = undefined;\nglobalThis.removeListenTagListener = undefined;",
        "system": "rc-threejs-basic.utils.listenerProxy"
      }
    }
  }
}